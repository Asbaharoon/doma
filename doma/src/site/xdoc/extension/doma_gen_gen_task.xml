<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Genタスク</title>
	</properties>
	<body>
		<section name="目次">
			<ul>
				<li><a href="#概要">概要</a></li>
				<li><a href="#パラメータ">パラメータ</a>
					<ul>
						<li><a href="#トップレベルパラメータ">トップレベルパラメータ</a></li>
						<li><a href="#ネストした要素として指定されるパラメータ">ネストした要素として指定されるパラメータ</a>
							<ul>
								<li><a href="#EntityConfig">EntityConfig</a></li>
								<li><a href="#DaoConfig">DaoConfig</a></li>
								<li><a href="#SqlConfig">SqlConfig</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#使用例">使用例</a>
					<ul>
						<li><a href="#エンティティクラスに共通のスーパークラスを指定する">エンティティクラスに共通のスーパークラスを指定する</a></li>
						<li><a href="#エンティティリスナーに共通のスーパークラスを指定する">エンティティリスナーに共通のスーパークラスを指定する</a></li>
						<li><a href="#エンティティプロパティのクラス名を指定する">エンティティプロパティのクラス名を指定する</a></li>
						<li><a href="#独自のテンプレートファイルを使用する">独自のテンプレートファイルを使用する</a></li>
						<li><a href="#独自のSQLファイルを生成する">独自のSQLファイルを生成する</a></li>
						<li><a href="#生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">生成するJavaファイルに共通のヘッダーとしてコピーライトを含める</a></li>
						<li><a href="#生成するJavaファイルにauthorを指定する">生成するJavaファイルにauthorを指定する</a></li>
					</ul>
				</li>
			</ul>
		</section>
		<section name="概要">
			<p>
				Genタスクは、データベースに接続してメタデータを読み取り、その情報を基にエンティティクラス、エンティティリスナークラス、Daoインタフェース、SQLのコードを生成します。
			</p>
			<p>
				Genタスクを利用するには、次のようにtaskdefタグとtypedefタグを使ってタスクとデータ型を定義する必要があります。
			</p>
<source><![CDATA[<taskdef name="gen" classname="org.seasar.doma.extension.gen.task.Gen" classpathref="classpath" loaderref="loader"/>
<typedef name="entityConfig" classname="org.seasar.doma.extension.gen.task.EntityConfig" loaderref="loader"/>
<typedef name="daoConfig" classname="org.seasar.doma.extension.gen.task.DaoConfig" loaderref="loader"/>
<typedef name="sqlConfig" classname="org.seasar.doma.extension.gen.task.SqlConfig" loaderref="loader"/>]]></source>
			<p>
				taskdefのclasspathref属性には、Doma-Gen、FreeMarker、JDBCドライバのjarファイルが参照されるように設定してください（Doma本体のjarファイルは不要です）。
			</p>
			<p>
				定義したタスクとデータ型は次のように使用します。
			</p>
<source><![CDATA[<target name="gen">
    <gen
        dialectName="${dialectName}"
        driverClassName="${driverClassName}"
        url="${url}"
        user="${user}"
        password="${password}">
        <entityConfig
            destdir="${javaDestDir}"
            packageName="${entityPackageName}"
        />
        <daoConfig
            destdir="${javaDestDir}"
            packageName="${daoPackageName}"
            configClassName="${configClassName}"
        />
        <sqlConfig
            destdir="${sqlDestDir}"
        />
    </gen>
</target>]]></source>
			<p>
				生成されるコードは次のようになります。
			</p>
			<p>
				エンティティクラスです。
			</p>
<source><![CDATA[@Entity(listener = AddressListener.class)
@Table(name = "ADDRESS")
public class Address {

    @Id
    @Column(name = "ADDRESS_ID")
    Integer addressId;

    @Column(name = "STREET")
    String street;

    @Version
    @Column(name = "VERSION")
    Integer version;
    ...
}]]></source>
			<p>
				エンティティリスナークラスです。
			</p>
<source><![CDATA[public class AddressListener implements EntityListener<Address> {

    @Override
    public void preInsert(Address entity, PreInsertContext context) {
    }

    @Override
    public void preUpdate(Address entity, PreUpdateContext context) {
    }

    @Override
    public void preDelete(Address entity, PreDeleteContext context) {
    }

    @Override
    public void postInsert(Address entity, PostInsertContext context) {
    }

    @Override
    public void postUpdate(Address entity, PostUpdateContext context) {
    }

    @Override
    public void postDelete(Address entity, PostDeleteContext context) {
    }
}]]></source>
			<p>
				Daoインタフェースです。
			</p>
<source><![CDATA[@Dao(config = AppConfig.class)
public interface AddressDao {

    @Select
    Address selectById(Integer addressId);

    @Select(ensureResult = true)
    Address selectByIdAndVersion(Integer addressId, Integer version);

    @Insert
    int insert(Address entity);

    @Update
    int update(Address entity);

    @Delete
    int delete(Address entity);
}]]></source>
			<p>
				Daoデリゲートクラスです。
			</p>
<source><![CDATA[public class AddressDaoDelegate {

    private final Config config;

    private final AddressDao dao;

    public AddressDaoDelegate(Config config, AddressDao dao) {
        if (config == null) {
            throw new NullPointerException("config");
        }
        if (dao == null) {
            throw new NullPointerException("dao");
        }
        this.config = config;
        this.dao = dao;
    }

    public int insert(Address entity) {
        return -1;
    }

    public int update(Address entity) {
        return -1;
    }

    public int delete(Address entity) {
        return -1;
    }
}]]></source>
			<p>
				識別子を条件として検索するSQLです。
			</p>
<source><![CDATA[select
    ADDRESS_ID,
    STREET,
    VERSION
from
    ADDRESS
where
    ADDRESS_ID = /* addressId */1]]></source>
			<p>
				識別子とバージョンを条件として検索するSQLです。
			</p>
<source><![CDATA[select
    ADDRESS_ID,
    STREET,
    VERSION
from
    ADDRESS
where
    ADDRESS_ID = /* addressId */1
    and
    VERSION = /* version */1
    ]]></source>
		</section>
		<section name="パラメータ">
			<subsection name="トップレベルパラメータ">
				<p>
					トップレベルパラメータの定義は次の通りです。
				</p>
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>dialectName</td><td>接続するRDBMSの方言名です。次のうちのどれかを指定できます。"h2"、"hsqldb"、"mysql"、"postgres"、"oracle"、"db2"、"mssql2008"。指定するクラスは、Genタスクを実行するクラスパスに通されている必要があります。</td><td>-</td><td><b>genDialectClassNameが指定されていない場合YES</b></td></tr>
					<tr><td>genDialectClassName</td><td>接続するRDBMSの方言クラス名です。<code>org.seasar.doma.extension.gen.dialect.GenDialect</code>の実装クラスでなければいけません。dialectNameの指定により利用できる組み込みの方言クラス以外を利用する場合に指定します。指定するクラスは、Genタスクを実行するクラスパスに通されている必要があります。</td><td>-</td><td><b>dialectNameが指定されていない場合YES</b></td></tr>
					<tr><td>driverClassName</td><td>JDBCドライバクラス名です。<code>java.sql.Driver</code>の実装クラスでなければいけません。</td><td>-</td><td><b><b>YES</b></b></td></tr>
					<tr><td>url</td><td>JDBC接続URLです。</td><td>-</td><td><b>YES</b></td></tr>
					<tr><td>user</td><td>JDBC接続ユーザーです。</td><td>-</td><td><b>YES</b></td></tr>
					<tr><td>password</td><td>JDBC接続パスワードです。</td><td>-</td><td><b>YES</b></td></tr>
					<tr><td>schemaName</td><td>対象とするテーブルが所属するスキーマ名です。指定しない場合、JDBC接続ユーザーでアクセス可能な全スキーマが対象になります。</td><td>-</td><td>NO</td></tr>
					<tr><td>tableNamePattern</td><td>対象とするテーブル名の正規表現です。大文字小文字の違いは考慮されません。</td><td>".*"</td><td>NO</td></tr>
					<tr><td>ignoredTableNamePattern</td><td>対象としないテーブル名の正規表現です。大文字小文字の違いは考慮されません。</td><td>".*\$.*"</td><td>NO</td></tr>
					<tr><td>tableTypes</td><td>対象とするテーブルの型です。複数の値を空白またはカンマで区切って指定できます。たとえば、テーブルに加えビューを対象にしたい場合、"TABLE, VIEW"と指定します。この値は、java.sql.DatabaseMetaDataクラスのgetTablesメソッドの最後のパラメータに渡されます。</td><td>"TABLE"</td><td>NO</td></tr>
					<tr><td>versionColumnNamePattern</td><td>エンティティのプロパティに@Versionを付与するカラム名の正規表現です。大文字小文字の違いは考慮されません。</td><td>"VERSION([_]?NO)?"</td><td>NO</td></tr>
					<tr><td>templateEncoding</td><td>テンプレートファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>templatePrimaryDir</td><td>テンプレートファイルを検索する際の優先ディレクトリです。独自テンプレートファイルを使用する場合に指定します。</td><td>-</td><td>NO</td></tr>
					<tr><td>globalFactoryClassName</td><td>このタスクで使用されるインスタンスを生成するファクトリの完全修飾名です。<code>org.seasar.doma.extension.gen.GlobalFactory</code>の実装クラスでなければいけません。このタスクの振る舞いをカスタマイズ場合に指定します。</td><td>"org.seasar.doma.extension.gen.GlobalFactory"</td><td>NO</td></tr>
				</table>
			</subsection>
			<subsection name="ネストした要素として指定されるパラメータ">
				<h4><a name="EntityConfig"></a>EntityConfig</h4>
				<p>
					エンティティクラスの生成に関する設定を表すデータ型です。
				</p>
				<p>
					このデータ型を使用するとエンティティクラスとエンティティリスナークラスを生成できます。エンティティクラスとエンティティリスナーは同じパッケージに生成されます。
				</p>
				<p>
					EntityConfigのパラメータ定義は次のとおりです。
				</p>
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>generate</td><td>"true"の場合、エンティティクラスとエンティティリスナーのJavaコードを生成します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>destDir</td><td>Javaファイルの出力先ディレクトリです。</td><td>"src"</td><td>NO</td></tr>
					<tr><td>encoding</td><td>Javaファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>overwrite</td><td>"true"の場合、エンティティクラスのJavaコードを上書きします。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>overwriteListener</td><td>"true"の場合、エンティティリスナークラスのJavaコードを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>packageName</td><td>エンティティクラスのパッケージ名です。</td><td>"example.entity"</td><td>NO</td></tr>
					<tr><td>superclassName</td><td>エンティティクラスのスーパークラスの完全修飾名です。生成されるエンティティクラスはここに指定したスーパークラスを継承します。指定するクラスは、Genタスクを実行するクラスパスに通されている必要があります。</td><td>-</td><td>NO</td></tr>
					<tr><td>listenerSuperclassName</td><td>エンティティリスナーのスーパークラスの完全修飾名です。生成されるエンティティリスナークラスはここに指定したスーパークラスを継承します。ここに指定するクラスは1つの型パラメータを受け取ります。</td><td>-</td><td>NO</td></tr>
					<tr><td>namingType</td><td>ネーミング規約です。"none"、 "snake_upper_case"、 "snake_lower_case"、"upper_case"、"lower_case"のいずれかの値を指定できます。@Entityのnaming要素に使用されます。</td><td>-</td><td>NO</td></tr>
					<tr><td>entityPropertyClassNamesFile</td><td>エンティティプロパティのクラス名を解決するためのファイルです。形式は、キーをエンティティプロパティ名の正規表現、値をクラスの完全修飾名とするプロパティファイル形式です。</td><td>-</td><td>NO</td></tr>
					<tr><td>generationType</td><td>識別子を生成する方法です。"identity"、 "sequence"、 "table"のいずれかの値を指定できます。使用するRDBMSがサポートしていない場合、"identity"や"sequence"を指定するとエラーが発生します。この指定は、エンティティに対応するテーブルが単一の主キーを持つ場合にのみ有効です。複数の主キーがある場合、この指定は無視されます。@GeneratedValueのstrategy要素に使用されます。</td><td>-</td><td>NO</td></tr>
					<tr><td>initialValue</td><td>識別子の初期値です。generationTypeに"sequence"もしくは"table"を指定した場合にのみ有効です。@SequenceGeneratorや@TableGeneratorのinitialValue要素に指定されます。</td><td>-</td><td>NO</td></tr>
					<tr><td>allocationSize</td><td>識別子の割り当てサイズです。generationTypeに"sequence"もしくは"table"を指定した場合にのみ有効です。@SequenceGeneratorや@TableGeneratorのallocationSize要素に指定されます。</td><td>-</td><td>NO</td></tr>
					<tr><td>useAccessor</td><td>"true"の場合、エンティティクラスにアクセサメソッドを付与します。"false"の場合、エンティティのプロパティはpublicフィールドになります。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>useListener</td><td>"true"の場合、エンティティリスナークラスのJavaコードを生成し、@Entityのlistener要素にエンティティリスナークラスを指定します。"false"の場合、エンティティリスナークラスのJavaコードは生成されません。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>useUtilDate</td><td>"true"の場合、エンティティクラスのプロパティの日付、時刻、タイムスタンプ型にjava.util.Dateを使用します。"false"の場合、日付、時刻、タイムスタンプ型にjava.sql.Date、java.sql.Time、java.sql.Timestampを使用します。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>showDbComment</td><td>"true"の場合、データベースに対するコメントをエンティティのJavadocコメントに適用します。テーブルへのコメントはクラスのJavadocコメントに反映され、カラムへのコメントはプロパティのJavadocコメントに反映されます。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>showCatalogName</td><td>"true"の場合、@Tableのcatalog属性にカタログ名を明記します。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>showSchemaName</td><td>"true"の場合、@Tableのschema属性にスキーマ名を明記します。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>showTableName</td><td>"true"の場合、@Tableのname属性にテーブル名を明記します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>showColumnName</td><td>"true"の場合、@Columnのname属性にカラム名を明記します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>originalStatesPropertyName</td><td>ここに指定した名前のプロパティに、@OriginalStatesを注釈します。テーブルのカラムから作られる永続的なプロパティと名前が重複しないように注意してください。指定しない場合、@OriginalStatesは使用されません。</td><td>-</td><td>NO</td></tr>
				</table>
				<h4><a name="DaoConfig"></a>DaoConfig</h4>
				<p>
					Daoインタフェースの生成に関する設定を表すデータ型です。
				</p>
				<p>
					このデータ型を使用するとエンティティごとに1つのDaoインタフェースとDaoデリゲートクラスを生成できます。
				</p>
				<p>
					DaoConfigのパラメータ定義は次のとおりです。
				</p>
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>overwrite</td><td>"true"の場合、DaoインタフェースのJavaコードを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>overwriteDelegate</td><td>"true"の場合、DaoデリゲートクラスのJavaコードを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>destDir</td><td>Javaファイルの出力先ディレクトリです。</td><td>"src"</td><td>NO</td></tr>
					<tr><td>encoding</td><td>Javaファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>generate</td><td>"true"の場合、DaoインタフェースのJavaコードを生成します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>packageName</td><td>Daoインタフェースのパッケージ名です。</td><td>"example.dao"</td><td>NO</td></tr>
					<tr><td>suffix</td><td>Daoインタフェース名のサフィックスです。Daoインタフェースの名前はエンティティクラス名に、この値をサフィックスしたものになります。</td><td>"Dao"</td><td>NO</td></tr>
					<tr><td>configClassName</td><td>設定クラスの完全修飾名です。@Daoのconfig要素に使用されます。</td><td>-</td><td>NO</td></tr>
					<tr><td>useDelegate</td><td>"true"の場合、DaoデリゲートクラスのJavaコードを生成します。"false"の場合、生成しません。</td><td>"false"</td><td>NO</td></tr>
				</table>
				<h4><a name="SqlConfig"></a>SqlConfig</h4>
				<p>
					SQLファイルの生成に関する設定を表すデータ型です。
				</p>
				<p>
					このデータ型を使用するとエンティティごとにデフォルトで2つのSQLファイルを生成できます。
					生成されるSQLは次のものです。
				</p>
				<ul>
					<li>条件に識別子を指定して検索するSQL</li>
					<li>条件に識別子とバージョンを指定して検索するSQL</li>
				</ul>
				<p>
					ただし、エンティティが識別子を持たない場合、SQLファイルは生成されません。
					また、エンティティがバージョンを持たない場合は、条件にバージョンを指定するSQLは生成されません。
				</p>
				<p>
					テンプレートを用意することで、独自のSQLファイルを生成できます。詳細は、<a href="#独自のSQLファイルを生成する">独自のSQLファイルを生成する</a>を参照してください。
				</p>
				<p>
					SqlConfigのパラメータ定義は次のとおりです。
				</p>
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>generate</td><td>"true"の場合、SQLファイルを生成します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>destDir</td><td>SQLファイルの出力先ディレクトリです。ファイルは、<a href="../reference/sqlfile.html#ファイル名の形式">ファイル名の形式</a>に則って出力されます。ここに指定したディレクトリを基点にMETA-INF以下のディレクトリが作成されます。</td><td>src</td><td>NO</td></tr>
					<tr><td>overwrite</td><td>"true"の場合、SQLファイルを上書きします。</td><td>"true"</td><td>NO</td></tr>
				</table>
			</subsection>
		</section>
		<section name="使用例">
			<subsection name="エンティティクラスに共通のスーパークラスを指定する">
				<p>
					EntityConfigのsuperclassName属性に、エンティティクラスに共通のスーパークラスの名前を指定できます。
					たとえば、エンティティに対応するすべてのテーブルにCREATE_TIMESTAMPとUPDATE_TIMESTAMPというカラムが定義されている場合、
					次のようなクラスを作成し、すべてのエンティティのスーパークラスに指定できます。
				</p>
<source><![CDATA[@Entity
public abstract class Common {
    Date createTimestamp;
    Date updateTimestamp;
    ...
}]]></source>
				<p>
					スーパークラス名をsuperclassName属性に指定します。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}">
    <entityConfig
        superclassName="example.Common"
        ...
    />
<gen/>]]></source>
				<p>
					タスクを実行するとexample.Commonを継承した次のようなクラスが生成されます。
				</p>
<source><![CDATA[@Entity
public class Employee extends Common {
    @Id
    Integer id;
    String name;
    ...
}]]></source>
			</subsection>
			<subsection name="エンティティリスナーに共通のスーパークラスを指定する">
				<p>
					EntityConfigのlistenerSuperclassName属性に、エンティティリスナーに共通のスーパークラスの名前を指定できます。
					通常、EntityConfigのsuperclassName属性と合わせて使用します。
					たとえば、次のようにエンティティクラスに共通のスーパークラスとそのクラスを型パラメータとして受け取るエンティティリスナーの2つを用意します。
				</p>
<source><![CDATA[@Entity
public abstract class Common {
    Date createTimestamp;
    Date updateTimestamp;
    ...
}]]></source>
<source><![CDATA[public class CommonListener<T extends Common> implements EntityListener<T> {
    public void preInsert(T entity, PreInsertContext context) {...}
    public void preUpdate(T entity, PreUpdateContext context) {...}
    public void preDelete(T entity, PreDeleteContext context) {...}
    public void postInsert(T entity, PostInsertContext context) {...}
    public void postUpdate(T entity, PostUpdateContext context) {...}
    public void postDelete(T entity, PostDeleteContext context) {...}
}]]></source>
				<p>
					これらのクラス名をsuperclassName属性とlistenerSuperclassName属性に指定します。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}">
    <entityConfig
        superclassName="example.Common"
        listenerSuperclassName="example.CommonListener"
        ...
    />
<gen/>]]></source>
				<p>
					タスクを実行するとexample.CommonListenerを継承した次のようなクラスが生成されます。
				</p>
<source><![CDATA[public class EmployeeListener extends CommonListener<Employee> {
}]]></source>
			</subsection>
			<subsection name="エンティティプロパティのクラス名を指定する">
				<p>
					<a href="../reference/domain.html">ドメインクラス</a>を使用する場合など、特定のエンティティプロパティに対しクラス名を指定したいことがあります。
				</p>
				<p>
					クラス名の指定は、プロパティファイルで行います。
					キーは、エンティティプロパティの完全修飾名を正規表現で表したもの、値はマッピングしたいクラスの完全修飾名です。
					エンティティプロパティの完全修飾名とは、「エンティティクラスの完全修飾名」と「エンティティプロパティ名」を「@」で連結したものです。
					たとえば、EmployeeエンティティクラスのエンティティプロパティemployeeNameの完全修飾名は、「example.entity.Employee@employeeName」です。
					Employeeエンティティクラスの中でエンティティプロパティ名が「Name」で終わるものを「example.domain.Name」クラスにマッピングさせるには、次のように記述します。
				</p>
<source><![CDATA[example.entity.Employee@.*Name$=example.domain.Name]]></source>
				<p>
					プロパティ名の部分を正規表現で示しています。正規表現はプロパティ名に対してのみ使用できます（@より左のクラス名は必ず完全修飾名でなければいけません）。
				</p>
				<p>
					生成されるエンティティクラスでは、次のようにemployeeNameプロパティの型が「example.domain.Name」になります。
				</p>
<source><![CDATA[import example.domain.Name;

@Entity
public class Employee extends Common {
    @Id
    Integer id;
    Name employeeName;
    ...
}]]></source>
				<p>
					Employeeエンティティクラスに限らず、すべてのエンティティクラスを対象にエンティティプロパティ名が「Name」で終わるものを「example.domain.Name」クラスにマッピングさせたい場合は次のように記述します。
				</p>
<source><![CDATA[.*Name$=example.domain.Name]]></source>
				<p>
					プロパティファイルは、エンティティプロパティごとに上から順番に評価され、正規表現がマッチした時点で評価を終えます。
					どの行にもマッチしない場合、クラス名はデフォルトのクラス名になります。
				</p>
				<p>
					プロパティファイルはentityPropertyClassNamesFile属性に指定できます。（ここではプロパティファイルの名前をentityPropertyClassNames.propertiesとします。）
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}">
    <entityConfig
        entityPropertyClassNamesFile="entityPropertyClassNames.properties"
        ...
    />
<gen/>]]></source>
			</subsection>
			<subsection name="独自のテンプレートファイルを使用する">
				<p>
					Doma-Genのテンプレートは、配布ファイルのresources/tempalteディレクトリ以下にあります。
					エンティティクラスのテンプレートはentity.ftl、エンティティリスナークラスのテンプレートはentityListener.ftl、Daoインタフェースのテンプレートはdao.ftl、DaoデリゲートクラスのテンプレートはdaoDelegate.ftlになります。
					また、識別子を条件に検索するSQLのテンプレートはselectById.sql.ftl、識別子とバージョンを条件に検索するSQLのテンプレートはselectByIdAndVersion.sql.ftlです。
					これをコピーして、修正を加えるのが良いでしょう。
					テンプレートの記述方法については<a href="http://freemarker.org/">FreeMarker</a>のドキュメントを参照してください。
				</p>
				<p>
					修正したテンプレートファイルは、ファイル名を変更せずにtemplateFilePrimaryDir属性に指定するディレクトリに配置します。
					mytempleteディレクトリに配置する場合、templatePrimaryDir属性にmytempleteを指定します。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}"
    templatePrimaryDir="mytemplete">
    <entityConfig
        ...
    />
<gen/>]]></source>
				<p>
					それぞれのテンプレートは、特定のデータモデルを参照します。
					テンプレートとデータモデルクラスの対応付けを以下に示します。
				</p>
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>テンプレート</th><th>データモデルクラス</th><th>生成物</th></tr>
					<tr><td>entity.ftl</td><td><a href="doma-gen/apidocs/org/seasar/doma/extension/gen/EntityDesc.html">org.seasar.doma.extension.gen.EntityDesc</a></td><td>エンティティクラスのJavaファイル</td></tr>
					<tr><td>entityListener.ftl</td><td><a href="doma-gen/apidocs/org/seasar/doma/extension/gen/EntityListenerDesc.html">org.seasar.doma.extension.gen.EntityListenerDesc</a></td><td>エンティティリスナークラスのJavaファイル</td></tr>
					<tr><td>dao.ftl</td><td><a href="doma-gen/apidocs/org/seasar/doma/extension/gen/DaoDesc.html">org.seasar.doma.extension.gen.DaoDesc</a></td><td>DaoインタフェースのJavaファイル</td></tr>
					<tr><td>daoDelegate.ftl</td><td><a href="doma-gen/apidocs/org/seasar/doma/extension/gen/DaoDelegateDesc.html">org.seasar.doma.extension.gen.DaoDelegateDesc</a></td><td>DaoデリゲートクラスのJavaファイル</td></tr>
					<tr><td>xxx.sql.ftl (xxxは任意の名称)</td><td><a href="doma-gen/apidocs/org/seasar/doma/extension/gen/SqlDesc.html">org.seasar.doma.extension.gen.SqlDesc</a></td><td>SQLファイル</td></tr>
				</table>
			</subsection>
			<subsection name="独自のSQLファイルを生成する">
				<p>
					テンプレートを用意することで、独自のSQLファイルを生成できます。
					テンプレートファイルの名前は、「生成したいsqlファイル名」 + 「.ftl」としてください。
				</p>
				<p>
					たとえば、全件検索を行うSQLファイルselectAll.sqlを生成するには、selectAll.sql.ftlという名前のテンプレートファイルを作成します。
					テンプレートファイルには、以下のように記述します。
					（テンプレートはデータモデルとして<a href="doma-gen/apidocs/org/seasar/doma/extension/gen/SqlDesc.html">org.seasar.doma.extension.gen.SqlDesc</a>のインスタンスを参照します。）
				</p>
<source><![CDATA[select
<#list entityDesc.entityPropertyDescs as property>
  ${property.columnName}<#if property_has_next>,</#if>
</#list>
from
  ${entityDesc.tableName}]]></source>
				<p>
					selectAll.sql.ftlは、templateFilePrimaryDir属性に指定するディレクトリに配置します。
					mytempleteディレクトリに配置する場合、templatePrimaryDir属性にmytempleteを指定します。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}"
    templatePrimaryDir="mytemplete">
    <sqlConfig
        ...
    />
<gen/>]]></source>
				<p>
					このように、独自のSQLファイルを生成する場合、SQLファイルに対応するDaoメソッドについても生成するとよいでしょう。
					Daoメソッドを生成するには、Daoインタフェースのテンプレートであるdao.ftlを修正し、templateFilePrimaryDir属性に指定するディレクトリに配置します。
				</p>
			</subsection>
			<subsection name="生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">
				<p>
					lib.ftlというファイルを作成し、これをtemplatePrimaryDir属性に指定するディレクトリに配置します。
					lib.ftlには次のようにcopyrightの定義をします。
<source><![CDATA[<#assign copyright>
/*
 * Copyright 2008-2009 ...
 * All rights reserved.
 */
</#assign>]]></source>
					mytemplete/lib.ftlと配置する場合、タスクの定義は次のようになります。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}"
    templatePrimaryDir="mytemplete">
    <entityConfig
        ...
    />
<gen/>]]></source>
			</subsection>
			<subsection name="生成するJavaファイルにauthorを指定する">
				<p>
					lib.ftlというファイルを作成し、これをtemplatePrimaryDir属性に指定するディレクトリに配置します。
					lib.ftlには次のようにauthorの定義をします。
<source><![CDATA[<#assign author="Nakamura">]]></source>
					mytemplete/lib.ftlと配置する場合、タスクの定義は次のようになります。
				</p>
<source><![CDATA[<gen
    dialectName="${dialectName}"
    driverClassName="${driverClassName}"
    url="${url}"
    user="${user}"
    password="${password}"
    templatePrimaryDir="mytemplete">
    <entityConfig
        ...
    />
<gen/>]]></source>
			</subsection>
		</section>
	</body>
</document>