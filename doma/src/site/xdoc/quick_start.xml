<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>クイックスタート</title>
	</properties>
	<body>
		<section name="クイックスタート">
			<p>
				あらかじめ<a href="setup.html">セットアップ</a>を完了させてください。
			</p>
			<p>
				このクイックスタートでは、PostgresSQLにサンプルテーブルとデータを用意し、取得と更新を行います。
			</p>
			<p>
				DDL、データベースの接続情報、方言（Dialect）の実装を書き換えれば他のRDBMSでも動作します
				（ただし、現状サポートしているRDBMSは、PosrgreSQL以外では、Oracle Database、MySQL、HSQLDBの3つです）。
			</p>
			<subsection name="サンプルテーブルの作成">
				<p>
					データベースに従業員テーブルを作成し、データを登録します。テーブルの定義とデータは次のとおりです。
				</p>
<source>create table EMPLOYEE (
  EMPLOYEE_ID integer not null primary key, 
  EMPLOYEE_NAME varchar(20), 
  HIREDATE date,
  SALARY numeric(7,2),
  VERSION_NO integer
);

insert into EMPLOYEE values(1, 'SMITH', '1980-12-17', 800, 1);
insert into EMPLOYEE values(2, 'ALLEN', '1981-02-20', 1600, 1);
insert into EMPLOYEE values(3, 'WARD', '1981-02-22', 1250, 1);</source>
			</subsection>
			<subsection name="JDBCドライバのダウンロード">
				<p>
					Postgre SQLのJDBCドライバは次のサイトからダウンロードできます。
					Domaは、JDBC 4 をサポートしているため、JDBC 4 に対応するドライバを使用できます。
				</p>
				<ul>
					<li><a href="http://jdbc.postgresql.org/download.html">http://jdbc.postgresql.org/download.html</a></li>
				</ul>
				<p>
					ダウンロードしたら開発環境のクラスパスに追加して使用してください。
				</p>
			</subsection>
			<subsection name="エンティティクラスの作成">
				<p>
					テーブルにマッピングするエンティティクラスを作成します。
					エンティティであることを示すために@Entityを注釈します。
				</p>
				<p>
					主キーには@Id、楽観的排他制御で使用するバージョン番号には@Versionを注釈します。
				</p>
				<p>
					プロパティのフィールドは、非<code>private</code>にします。
				</p>
<source>package example;

import java.math.BigDecimal;
import java.sql.Date;

import org.seasar.doma.Entity;
import org.seasar.doma.Id;
import org.seasar.doma.Version;

@Entity
public class Employee {

    @Id
    Integer employeeId;

    String employeeName;

    Date hiredate;

    BigDecimal salary;

    @Version
    Integer versionNo;

    public Integer getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(Integer employeeId) {
        this.employeeId = employeeId;
    }

    public String getEmployeeName() {
        return employeeName;
    }

    public void setEmployeeName(String employeeName) {
        this.employeeName = employeeName;
    }

    public Date getHiredate() {
        return hiredate;
    }

    public void setHiredate(Date hiredate) {
        this.hiredate = hiredate;
    }

    public BigDecimal getSalary() {
        return salary;
    }

    public void setSalary(BigDecimal salary) {
        this.salary = salary;
    }

    public Integer getVersionNo() {
        return versionNo;
    }

    public void setVersionNo(Integer versionNo) {
        this.versionNo = versionNo;
    }

    @Override
    public String toString() {
        return "Employee [employeeId=" + employeeId + ", employeeName="
                + employeeName + ", hiredate=" + hiredate + ", salary="
                + salary + ", versionNo=" + versionNo + "]";
    }

}</source>
			</subsection>
			<subsection name="設定クラスの作成">
				<p>
					データベースアクセスに関する設定情報を提供するクラスを作成します。
					ここでは、PostgreSQLのデータソースと方言を利用することを示します。
				</p>
				<p>
					<code>DomaAbstractConfig</code> を継承すると簡単に作成できます。
				</p>
<source>package example;

import javax.sql.DataSource;

import org.seasar.doma.jdbc.DomaAbstractConfig;
import org.seasar.doma.jdbc.SimpleDataSource;
import org.seasar.doma.jdbc.dialect.Dialect;
import org.seasar.doma.jdbc.dialect.PostgresDialect;

public class AppConfig extends DomaAbstractConfig {

	private static DataSource dataSource = createDataSource();

	private static Dialect dialect = new PostgresDialect();

	@Override
	public DataSource dataSource() {
		return dataSource;
	}

	@Override
	public Dialect dialect() {
		return dialect;
	}

	private static DataSource createDataSource() {
		SimpleDataSource dataSource = new SimpleDataSource();
		dataSource.setUrl("jdbc:postgresql://localhost/demo");
		dataSource.setUser("postgres");
		dataSource.setPassword("postgres");
		return dataSource;
	}
}</source>
			</subsection>
			<subsection name="DAOインタフェースの作成">
				<p>
					データアクセスを行うためのData Access Object（Dao）インタフェースを作成します。
					Daoであることを示すために@Daoを注釈します。
					@Daoのconfig要素には、先ほど作成したAppConfigクラスを指定してください。
				</p>
				<p>
					検索のメソッドには@Select、更新のメソッドには@Updateを注釈します。
				</p>
<source>package example;

import org.seasar.doma.Dao;
import org.seasar.doma.Select;
import org.seasar.doma.Update;

@Dao(config = AppConfig.class)
public interface EmployeeDao {

    @Select
    Employee selectById(Integer employeeId);

    @Update
    int update(Employee employee);
}</source>
				<p>
					selectByIdメソッドに、対応するSQLファイルが存在しないことを示すエラーが表示されることを確認します。
				</p>
			</subsection>
			<subsection name="SQLファイルの作成">
				<p>
					selectByIdメソッドに対応するSQLファイルを作成します。
					SQLファイルのパスは「META-INF/example/EmployeeDao/selectById.sq」にします。
					このパスはクラスパスに通っていなければいけません。
				</p>
<source>select * from employee where employee_id = /*employeeId*/99</source>
				<p>
					ファイルを作成したら、<code>EmployeeDao</code>を再度ビルドしてください。
					ビルドをするとSQLファイルの存在チェックが再度行われエラーが消えます。
				</p>
				<p>
					また、ビルドが成功すると、インタフェースと同じパッケージに<code>EmployeeDaoImpl</code>という実装クラスが自動生成されます。
					データベースアクセスは、この実装クラスをインスタンス化しておこないます。
				</p>
			</subsection>
			<subsection name="起動クラスの作成">
				<p>
					エンティティやDaoを利用してデータベースアクセスを行います。
				</p>
<source>package example;

public class Main {

    public static void main(String[] args) {
        EmployeeDao dao = new EmployeeDaoImpl();
        Employee employee = dao.selectById(3);
        employee.setEmployeeName("KING");
        dao.update(employee);
    }
}</source>
				<p>
					ここでは、従業員テーブルから1件を主キーで検索し、従業員名を更新しています。
				</p>
			</subsection>
			<subsection name="実行結果（実行時のログ出力）">
				<p>
					実行すると、<code>java.util.logging.Logger</code>を使用したログがコンソールに出力されます。
					わかりやすいように、検索処理のログと更新処理のログの間に空行を入れています。
				</p>
<source>2009/10/01 21:39:46 example.EmployeeDaoImpl selectById
情報: ENTRY
2009/10/01 21:39:46 example.EmployeeDaoImpl selectById
情報: META-INF/example/EmployeeDao/selectById.sql
2009/10/01 21:39:47 example.EmployeeDaoImpl selectById
情報: select * from employee where employee_id = 3
2009/10/01 21:39:47 example.EmployeeDaoImpl selectById
情報: RETURN Employee [employeeId=3, employeeName=WARD, hiredate=1981-02-22, salary=1250.00, versionNo=1]

2009/10/01 21:39:47 example.EmployeeDaoImpl update
情報: ENTRY
2009/10/01 21:39:47 example.EmployeeDaoImpl update
情報: update EMPLOYEE set EMPLOYEE_NAME = 'KING', HIREDATE = '1981-02-22', SALARY = 1250.00, VERSION_NO = 1 + 1 where EMPLOYEE_ID = 3 and VERSION_NO = 1
2009/10/01 21:39:47 example.EmployeeDaoImpl update
情報: RETURN 1</source>
			</subsection>
		</section>
	</body>
</document>
