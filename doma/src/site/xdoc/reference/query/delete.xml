<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>削除</title>
	</properties>
	<body>
		<section name="目次">
			<ul>
				<li><a href="#概要">概要</a></li>
				<li><a href="#SQLの自動生成による削除">SQLの自動生成による削除</a>
					<ul>
						<li><a href="#SQL自動生成におけるバージョン番号と楽観的排他制御">SQL自動生成におけるバージョン番号と楽観的排他制御</a></li>
					</ul>
				</li>
				<li><a href="#SQLファイルによる削除">SQLファイルによる削除</a>
					<ul>
						<li><a href="#SQLファイルにおけるバージョン番号と楽観的排他制御">SQLファイルにおけるバージョン番号と楽観的排他制御</a></li>
					</ul>
				</li>
				<li><a href="#クエリタイムアウト">クエリタイムアウト</a></li>
			</ul>
		</section>
		<section name="概要">
			<p>
				削除を行うには、<a href="../../apidocs/org/seasar/doma/Delete.html"><code>@Delete</code></a>をDaoのメソッドに注釈します。
			</p>
<source><![CDATA[@Config(config = AppConfig.class)
public interface EmployeeDao {
    @Delete
    int delete(Employee employee);
    ...
}]]></source>
			<p>
				デフォルトでは、DELETE文が自動生成されます。
				<code>@Delete</code>の<code>sqlFile</code>に<code>true</code>を設定することで、任意の<a href="../sqlfile.html">SQLファイル</a>にマッピングできます。
			</p>
			<p>
				パラメータの<a href="../entity.html">エンティティクラス</a>に<a href="../entity.html#エンティティリスナー">エンティティリスナー</a>が指定されている場合、削除の実行前にエンティティリスナーの<code>preDelete</code>メソッドを呼び出します。
				また、削除の実行後にエンティティリスナーの<code>postDelete</code>メソッドを呼び出します。
			</p>
		</section>
		<section name="SQLの自動生成による削除">
			<p>
				戻り値の型は<code>int</code>でなければいけません。
				戻り値は更新件数を返します。
				パラメータの型は<a href="../entity.html">エンティティティクラス</a>でなければいけません。
				指定できるパラメータの数は1つです。
				引数は<code>null</code>であってはいけません。
			</p>
<source><![CDATA[@Delete
int delete(Employee employee);]]></source>
			<subsection name="SQL自動生成におけるバージョン番号と楽観的排他制御">
				<p>
					次の条件を満たす場合に、楽観的排他制御が行われます。 
				</p>
				<ul>
					<li>パラメータの<a href="../entity.html">エンティティティクラス</a>に<code>@Version</code>が注釈されたプロパティがある</li>
					<li>@Deleteの<code>ignoreVersion</code>要素が<code>false</code>である</li>
				</ul>
				<p>
					楽観的排他制御が有効であれば、バージョン番号は識別子とともに削除条件に含まれます。
					この場合、削除件数が0件であれば、楽観的排他制御の失敗を示す<a href="../../apidocs/org/seasar/doma/jdbc/OptimisticLockException.html"><code>org.seasar.doma.jdbc.OptimisticLockException</code></a>がスローされます。
				</p>
				<p>
					<code>@Delete</code>の<code>ignoreVersion</code>要素が<code>true</code>の場合、
					バージョン番号は削除条件に含まれません。
					この場合、削除件数が0件であっても、<code>OptimisticLockException</code>はスローされません。
				</p>
<source><![CDATA[@Delete(includeVersion = true)
int delete(Employee employee);]]></source>
				<p>
					<code>@Delete</code>の<code>suppressOptimisticLockException</code>要素が<code>true</code>の場合、
					バージョン番号は削除条件に含まれます。
					しかし、この場合、削除件数が0件であっても、<code>OptimisticLockException</code>はスローされません。
				</p>
<source><![CDATA[@Delete(suppressOptimisticLockException = true)
int delete(Employee employee);]]></source>
			</subsection>
		</section>
		<section name="SQLファイルによる削除">
			<p>
				SQLファイルによる削除を行うには、<code>@Delete</code>の<code>sqlFile</code>要素に<code>true</code>を設定し、
				メソッドに対応する<a href="../sqlfile.html">SQLファイル</a>を用意します。
			</p>
			<p>
				戻り値の型は<code>int</code>でなければいけません。
				戻り値は更新件数を返します。
				パラメータには任意の型が使用できます。
				指定できるパラメータの数に制限はありません。
				パラメータの型が基本型もしくはドメインクラスの場合、引数を<code>null</code>にできます。
				それ以外の型の場合、引数は<code>null</code>であってはいけません。
			</p>
			<p>
				<a href="../entity.html">エンティティ</a>に<a href="../entity.html#エンティティリスナー">エンティティリスナー</a>が指定されていても、エンティティリスナーのメソッドは呼び出しません。
			</p>
<source><![CDATA[@Delete(sqlFile = true)
int delete(Employee employee);]]></source>
			<p>
				たとえば、上記のメソッドに対応するSQLは次のように記述します。
			</p>
<source><![CDATA[delete from employee where name = /* employee.name */'hoge']]></source>
			<subsection name="SQLファイルにおけるバージョン番号と楽観的排他制御">
				<p>
					次の条件を満たす場合に、楽観的排他制御が行われます。 
				</p>
				<ul>
					<li>パラメータに<a href="../entity.html">エンティティティクラス</a>を含む</li>
					<li>パラメータの内、左から数えて最初に登場するエンティティクラスに<code>@Version</code>が注釈されたプロパティがある</li>
					<li>@Deleteの<code>ignoreVersion</code>要素が<code>false</code>である</li>
					<li>@Deleteの<code>suppressOptimisticLockException</code>要素が<code>false</code>である</li>
				</ul>
				<p>
					ただし、SQLファイルに楽観的排他制御用のSQLを記述するのは、アプリケーション開発者の責任です。
					たとえば、下記のSQLのように、WHERE句でバージョンを番号を指定しなければいけません。
				</p>
<source><![CDATA[delete from EMPLOYEE where ID = /* employee.id */1 and VERSION = /* employee.version */1]]></source>
				<p>
					このSQLの削除件数が0件の場合、楽観的排他制御の失敗を示す<a href="../../apidocs/org/seasar/doma/jdbc/OptimisticLockException.html"><code>org.seasar.doma.jdbc.OptimisticLockException</code></a>がスローされます。
					削除件数が0件でない場合、<code>OptimisticLockException</code>はスローされません。
				</p>
				<p>
					<code>@Delete</code>の<code>ignoreVersion</code>要素、または<code>suppressOptimisticLockException</code>要素が<code>true</code>の場合、
					削除件数が0件であっても、<code>OptimisticLockException</code>はスローされません。
				</p>
<source><![CDATA[@Delete(sqlFile = true, includeVersion = true)
int delete(Employee employee);]]></source>
<source><![CDATA[@Delete(sqlFile = true, suppressOptimisticLockException = true)
int delete(Employee employee);]]></source>
			</subsection>
		</section>
		<section name="クエリタイムアウト">
			<p>
				<code>@Delete</code>の<code>queryTimeout</code>要素にクエリタイムアウトの秒数を指定できます。
			</p>
<source><![CDATA[@Delete(queryTimeout = 10)
int delete(Employee employee);]]></source>
			<p>
				この設定は、SQLファイルの使用の有無に関係なく適用されます。
				<code>queryTimeout</code>要素に値を指定しない場合、
				<a href="../config.html">設定クラス</a>に指定されたクエリタイムアウトが使用されます。
			</p>
		</section>
	</body>
</document>