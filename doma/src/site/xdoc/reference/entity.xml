<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>エンティティクラス</title>
	</properties>
	<body>
		<section name="概要">
			<p>
				Entity（エンティティ）は、データベースのテーブルやクエリの結果セットに対応します。
			</p>
			<p>
				このページで説明するアノテーションはすべて<code>org.seasar.doma</code>パッケージに属します。
			</p>
		</section>
		<section name="エンティティ定義">
			<p>
				エンティティクラスは <code>@Entity</code>が注釈された非<code>private</code>なクラスとして定義します。
				クラスはトップレベルのクラスでなければいけません（他のクラスやインタフェースにネストされていてはいけません）。
				エンティティクラスは <code>abstract</code>であってはいけません。
				エンティティクラスからは、フレームワークの内部で使用されるクラスがaptによりコンパイル時に自動生成されます。
			</p>
<source><![CDATA[@Entity
public class Employee {
    ...
}]]></source>
			<p>
				エンティティがデータベースに対し挿入、更新、削除される直前に処理を実行したい場合、
				<code>listener</code> 要素に <code>org.seasar.doma.jdbc.entity.EntityListener</code>
				の実装クラスを指定できます。
			</p>
<source>@Entity(listener = EntityListener.class)
public class Employee {
    ...
}</source>
<source><![CDATA[public class EmployeeEntityListener implements EntityListener<Employee> {
    @Override
    public void preDelete(Employee entity) {
        ...
    }
    @Override
    public void preInsert(Employee entity) {
        ...
    }
    @Override
    public void preUpdate(Employee entity) {
        ...
    }
}]]></source>
				<p>
					<code>EntityListener</code>の実装クラスはpublicなデフォルトコンストラクタ（引数なしのコンストラクタ）を持たねばいけません。
				</p>
			<subsection name="テーブル">
				<p>
					エンティティに対応するテーブル情報を指定するには、 <code>@Table</code> を使用します。
				</p>
				<p>
					<code>name</code> 要素でテーブル名を指定できます。
				</p>
<source><![CDATA[@Entity
@Table(name = "EMP")
public class Employee {
    ...
}]]></source>
				<p>
					<code>catalog</code> 要素や <code>schema</code> 要素 でカタログやスキーマを指定できます。
				</p>
<source><![CDATA[@Entity
@Table(catalog = "CATALOG", schema ="SCHEMA", name = "EMP")
public class Employee {
    ...
}]]></source>
				<p>
					<code>@Table</code>を使用しない、もしくは <code>@Table</code>の <code>name</code>要素
					を使用しない場合、テーブル名は、 <code>org.seasar.doma.jdbc.NamingConvention</code>の実装クラスに
					より解決されます。 <code>NamingConvention</code>の実装クラスは <code>Dao</code>の設定で決まります。
				</p>
			</subsection>
			<subsection name="継承">
				<p>
					任意のクラスを継承できます。
				</p>
				<p>
					ただし、親クラスのフィールドが永続フィールドとみなされたりDomaのアノテーションが解釈されたりするのは、親クラスが@Entityで注釈されている場合だけです。
					@Entityで注釈されているクラスを継承する場合、親クラスは子クラスと同じパッケージに存在する必要があります。
				</p>
			</subsection>
		</section>
		<section name="フィールド定義">
			<subsection name="永続的なフィールド">
				<p>
					永続的なフィールドは、テーブルや結果セットのカラムに対応します。
				</p>
				<p>
					フィールドの型は、<a href="basic">基本型</a>もしくは<code>@Domain</code>が注釈されたクラスでなければいけません。
					フィールドの可視性は非<code>private</code>でなければいけません。
				</p>
<source><![CDATA[@Entity
public class Employee {
    ...
    Integer employeeId;
}]]></source>
			</subsection>
				<h4>カラム</h4>
				<p>
					プロパティに対応するカラム情報を指定するには、<code>@Column</code>を使用します。
				</p>
				<p>
					<code>name</code>要素でカラム名を指定できます。
				</p>
<source><![CDATA[@Column(name = "ENAME")
String employeeName;]]></source>
				<p>
					<code>insertable</code>要素や <code>updatable</code>要素 で挿入や更新の対象とするかどうかを指定できます。
				</p>
<source><![CDATA[@Column(insertable = false, updatable = false)
String employeeName;]]></source>
				<p>
					<code>@Column</code>を使用しない、もしくは<code>@Column</code>の <code>name</code>要素
					を使用しない場合、カラム名は、<code>org.seasar.doma.jdbc.NamingConvention</code>の実装クラスに
					より解決されます。 <code>NamingConvention</code>の実装クラスは<a href="config.html"><code>Dao</code>の設定</a>で決まります。
				</p>
				<h4>識別子</h4>
				<p>
					識別子(主キー)であることを指定するには、<code>@Id</code>を使います。 
				</p>
<source><![CDATA[@Id
Integer id;]]></source>
				<p>
					複合主キーの場合は <code>@Id</code> を複数指定します。 
				</p>
<source><![CDATA[@Id
Integer id;

@Id
Integer id2;]]></source>
				<p>
					識別子を自動生成する場合は、 <code>@GeneratedValue</code> を使用し、
					生成方法を <code>strategy</code> 要素に指定します。 
				</p>
<source><![CDATA[@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
Identity id();]]></source>
				<p>
					<code>strategy</code> 要素に指定できる方法は、
					 <code>GenerationType.IDENTITY</code> 、
					 <code>GenerationType.SEQUENCE</code> 、
					 <code>GenerationType.TABLE</code> の3つです。
				</p>
				<p>
					<code>@GeneratedValue</code>を注釈する場合、そのフィールドの型は数値のプリミティブ型
					もしくは<code>Number</code>のサブタイプでなければいけません。
				</p>
				<h4>バージョン</h4>
				<p>
					楽観的排他制御用のバージョンは<code>@Version</code>を注釈して示します。
				</p>
				<p>
					フィールドの型は数値のプリミティブ型
					もしくは<code>Number</code>のサブタイプでなければいけません。
				</p>
<source><![CDATA[@Version
Integer version;]]></source>
			<subsection name="非永続的なフィールド">
				<p>
					非永続的なフィールドは、テーブルや結果セットのカラムに対応しません。
				</p>
				<p>
					<code>@Transient</code>を注釈して示します。
					フィールドの型に制限はありません。
				</p>
<source><![CDATA[@Transient
BigDecimal tempSalary;]]></source>
<source>@Transient
List&lt;String&gt; nameList;</source>
			</subsection>
			<subsection name="変更されたフィールドを管理するフィールド">
				<p>
					変更されたフィールドを管理するフィールドは、テーブルや結果セットのカラムに対応しません。
					変更されたフィールドを管理することで、Daoインタフェースの@Updateが注釈されたメソッドを介して更新処理を実行する際、
					UPDATE文のSET句に変更したフィールドのみを含めるようにすることが可能です。
				</p>
				<p>
					<code>@ChangedProperties</code>を注釈して示します。
					フィールドの型は<code><![CDATA[java.util.Set<String>]]></code>のサブタイプでなければいけません。
				</p>
<source><![CDATA[@ChangedProperties
Set<String> chagendProperties = new HashSet<String>();]]></source>
				<p>
					変更されたフィールドの名前を<code>@ChangedProperties</code>が注釈されたSetに追加するのはアプリケーション開発者の責任です。
					フィールド名の追加は、永続的なフィールドに対応するsetterメソッドで行うのが適切です。
				</p>
<source><![CDATA[public void setEmployeeId(Integer employeeId) {
    chagendProperties.add("employeeId");
    this.employeeId = employeeId;
}]]></source>
			</subsection>
		</section>
		<section name="エンティティの利用方法">
			<p>
				インスタンス化して使用します。
			</p>
<source><![CDATA[Employee employee = new Employee();
employee.setEmployeeName("SMITH");
employee.setSalary(new BigDecimal(1000);]]></source>
		</section>
	</body>
</document>