<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Daoインタフェース</title>
	</properties>
	<body>
		<section name="目次">
			<ul>
				<li><a href="#概要">概要</a></li>
				<li><a href="#Dao定義">Dao定義</a></li>
				<li><a href="#クエリメソッド定義">クエリメソッド定義</a></li>
				<li><a href="#デリゲート定義">デリゲート定義</a></li>
				<li><a href="#Daoの利用方法">Daoの利用方法</a></li>
			</ul>
		</section>
		<section name="概要">
			<p>
				Data Access Object （Dao） はデータベースアクセスのためのインタフェースです。
			</p>
			<p>
				このページで説明するアノテーションはすべて <code>org.seasar.doma</code> パッケージに属します。
			</p>
		</section>
		<section name="Dao定義">
			<p>
				Daoは <code>@Dao</code>が注釈されたインタフェースとして定義します。
				インタフェースはトップレベルのインタフェースでなければいけません（他のクラスやインタフェースにネストされていてはいけません）。
				インタフェースの実装クラスはaptによりコンパイル時に自動生成されます。
			</p>
<source>@Dao(config = AppConfig.class)
public interface EmployeeDao {
    ...
}</source>
			<p>
				<code>@Dao</code>の <code>config</code>要素には、
				<code>org.seasar.doma.jdbc.Config</code>の実装クラスを指定しなければいけません。
				<code>Config</code>の実装クラスは、データソース、データベースの方言、ネーミング規約等の<a href="config.html">設定</a>を行います。
			</p>
		</section>
		<section name="クエリメソッド定義">
			<p>
				SQLを問い合わせるクエリメソッドには、アノテーションが必須です。
			</p>
			<subsection name="検索">
				<p>
					検索を行うには、 <a href="../apidocs/org/seasar/doma/Select.html"><code>@Select</code></a>を注釈します。
				</p>
				<p>
					検索条件のパラメータとして、<a href="basic.html">基本型</a>、<a href="domain.html">ドメインクラス</a>、<a href="entity.html">エンティティクラス</a>を任意の数だけ宣言できます。
					また、IN句で複数のバインド変数に使用できるように、基本型やドメインクラスを要素とする<code>java.util.List</code>型のパラメータも宣言できます。
				</p>
				<p>
					ページングや悲観的排他制御を可能とするには、
					<code>org.seasar.doma.jdbc.SelectOptions</code>型のパラメータを宣言してください。
				</p>
				<p>
					大量件数を1件ずつ処理するには、<code>@Select</code>の <code>iterate</code>要素に <code>true</code>を設定し、
					<code>org.seasar.doma.jdbc.IterationCallback</code>型のパラメータを宣言してください。
				</p>
				<p>
					検索についてはSQLの自動生成機能はありません。
					メソッドに対応する<a href="sqlfile.html">SQLファイル</a>が必須です。
				</p>
			</subsection>
			<subsection name="挿入">
				<p>
					挿入を行うには、 <a href="../apidocs/org/seasar/doma/Insert.html"><code>@Insert</code></a>を注釈します。
				</p>
				<p>
					<code>sqlFile</code>要素により、SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。
				</p>
			</subsection>
			<subsection name="更新">
				<p>
					更新を行うには、<a href="../apidocs/org/seasar/doma/Update.html"><code>@Update</code></a>を注釈します。
				</p>
				<p>
					<code>sqlFile</code>要素により、SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。
				</p>
			</subsection>
			<subsection name="削除">
				<p>
					削除を行うには、 <a href="../apidocs/org/seasar/doma/Delete.html"><code>@Delete</code></a>を注釈します。
				</p>
				<p>
					SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。 
				</p>
			</subsection>
			<subsection name="バッチ挿入">
				<p>
					バッチ挿入を行うには、 <a href="../apidocs/org/seasar/doma/BatchInsert.html"><code>@BatchInsert</code></a>を注釈します。
				</p>
				<p>
					SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。 
				</p>
			</subsection>
			<subsection name="バッチ更新">
				<p>
					バッチ更新を行うには、 <a href="../apidocs/org/seasar/doma/BatchUpdate.html"><code>@BatchUpdate</code></a>を注釈します。
				</p>
				<p>
					<code>sqlFile</code>要素により、SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。
				</p>
			</subsection>
			<subsection name="バッチ削除">
				<p>
					バッチ削除を行うには、 <a href="../apidocs/org/seasar/doma/BatchDelete.html"><code>@BatchDelete</code></a>を注釈します。
				</p>
				<p>
					<code>sqlFile</code>要素により、SQLの自動生成を使用するか<a href="sqlfile.html">SQLファイル</a>を使用するか選択できます。
					デフォルトではSQLの自動生成が実行されます。
				</p>
			</subsection>
			<subsection name="ストアドファンクション">
				<p>
					ストアドファンクションを呼び出すには、 <a href="../apidocs/org/seasar/doma/Function.html"><code>@Function</code></a>を注釈します。
				</p>
				<p>
					SQLの自動生成機能のみがサポートされています。
					SQLファイルにマッピングはできません。
				</p>
			</subsection>
			<subsection name="ストアドプロシージャー">
				<p>
					ストアドプロシージャーを呼び出すには、 <a href="../apidocs/org/seasar/doma/Procedure.html"><code>@Procedure</code></a>を注釈します。
				</p>
				<p>
					SQLの自動生成機能のみがサポートされています。
					SQLファイルにマッピングはできません。
				</p>
			</subsection>
			<subsection name="ファクトリ">
				<p>
					JDBC4.0の <code>java.sql.Connection</code>が提供するファクトリメソッドを呼び出すには
					<a href="../apidocs/org/seasar/doma/ArrayFactory.html"><code>@ArrayFactory</code></a> 、
					<a href="../apidocs/org/seasar/doma/BlobFactory.html"><code>@BlobFactory</code></a> 、
					<a href="../apidocs/org/seasar/doma/ClobFactory.html"><code>@ClobFactory</code></a> 、
					<a href="../apidocs/org/seasar/doma/NClobFactory.html"><code>@NClobFactory</code></a> 、
					を注釈します。
				</p>
			</subsection>
		</section>
		<section name="デリゲート定義">
			<p>
				Daoは、インタフェースであるためロジックをもつことができません。
				しかし、 <code>@Delegate</code>を注釈することで別のクラスに処理を委譲（デリゲート）できます。
				JDBCを直接使った処理を行いたい場合に使用するといいでしょう。
			</p>
<source>@Dao(config = AppConfig.class)
public interface EmployeeDao {

    @Delegate(to = EmployeeDaoDelegate.class)
    int execute(Employee employee);
}</source>
			<p>
				<code>@Delegate</code> の <code>to</code>要素には、委譲先のクラスを指定します。
				委譲先のクラスの<code>public</code>なコンストラクタでは、<code>org.seasar.doma.jdbc.Config</code>を受け取るようにします。
			</p>
<source>public class EmployeeDaoDelegate {

    private Config config;
    
    public EmployeeDaoDelegate(Config config) {
        this.config = config;
    }

    public int execute(Employee employee) {
        DataSource dataSource = config.dataSource();
        ...
    }
}</source>
			<p>
				委譲先で委譲元のDaoインスタンスにアクセスしたい場合は、<code>public</code>なコンストラクタの2番目のパラメータで委譲元のDaoの型を受け取るようにします。
			</p>
<source>public class EmployeeDaoDelegate {

    private Config config;
    
    private EmployeeDao employeeDao;
    
    public EmployeeDaoDelegate(Config config, EmployeeDao employeeDao) {
        this.config = config;
        this.employeeDao = employeeDao;
    }

    public int execute(Employee employee) {
        ...
    }
}</source>
			<p>
				委譲先のクラスは次の制約を満たす必要があります。
			</p>
			<ul>
				<li><code>org.seasar.doma.jdbc.Config</code>を受け取るpublicなコンストラクタを持つ、もしくは、<code>org.seasar.doma.jdbc.Config</code>と委譲元のDaoを受け取るpublicなコンストラクタを持つ</li>
				<li>委譲元のメソッドと同じシグニチャのメソッドを持つ</li>
			</ul>
		</section>
		<section name="Daoの利用方法">
			<p>
				コンパイルすると、aptにより実装クラスが生成されます。
				実装クラスをインスタンス化して使用してください。
			</p>
<source>EmployeeDao employeeDao = new EmployeeDaoImpl();
Employee employee = employeeDao.selectById(1);</source>
			<p>
				デフォルトでは、実装クラスの名前はインタフェースの名前に<code>Impl</code>をサフィックスしたものになります。
				パッケージやサフィックスを変更するには、<a href="apt.html">アノテーション処理</a>を参照してください。
			</p>
			<p>
				デフォルトコンストラクタを使用した場合は、<code>@Dao</code>の <code>config</code>要素に
				指定した設定により<code>DataSource</code>が決定しますが、
				特定の <code>DataSource</code>を指定してインスタンス化することも可能です。
			</p>
<source>DataSource dataSource = ...;
EmployeeDao employeeDao = new EmployeeDaoImpl(dataSource);
Employee employee = employeeDao.selectById(1);</source>
			<p>
				Daoインタフェースはエンティティクラスと1対1で結びついているわけではありません。
				ひとつのDaoインタフェースで複数のエンティティクラスを扱えます。
			</p>
<source><![CDATA[@Dao(config = AppConfig.class)
public interface MyDao {
    @Select
    Employee selectEmployeeById(int id);
    @Select
    Department selectDepartmentByName(String name);
    @Update
    int updateAddress(Address address);
}]]></source>
		</section>
	</body>
</document>