<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>ドメイン</title>
	</properties>
	<body>
		<section name="概要">
			<p>
				Domain（ドメイン）クラスの定義方法を示します。
				ドメインとは、値のとり得る範囲（定義域）のことです。
				Domaでは、テーブルのカラムの値を、ドメインと呼ばれるJavaオブジェクトで扱います。
			</p>
			<p>
				ドメインクラスを利用することで、データベース上のカラムの型が同じあってもアプリケーション上意味が異なるものを別のJavaの型で表現できます。
				これにより、意味を明確にしプログラミングミスを事前に防ぐことが可能です。
				また、ドメインクラスに振る舞いを持たせることで、よりわかりやすいプログラミングが可能です。
			</p>
			<p>
				ドメインクラスの作成と利用は任意です。
				ドメインクラスを利用しなくても<code>Integer</code>や<code>String</code>など基本型のみでデータアクセスは可能です。
			</p>
		</section>
		<section name="ドメインクラスの作成">
			<p>
				ドメインクラスは <code>@Domain</code>を注釈して示します。
			</p>
			<p>
				<code>@Domain</code>の<code>valueType</code>要素には、ドメインクラスで扱う基本型を指定します。この基本型が、データベースのカラムの型とのマッピングに使用されます。
			</p>
			<p>
				<code>accessorMethod</code>要素には、<code>valueType</code>要素に指定した型を返すアクセッサーメソッドの名前を指定します。デフォルト値は<code>getValue</code>です。
			</p>
			<p>
				以下の例では、 電話番号を表すドメインクラスを作成しています。
			</p>
<source>package example.domain;

import org.seasar.doma.Domain;

@Domain(valueType = String.class)
public class PhoneNumber {

    private final String value;

    public PhoneNumber(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public String getAreaCode() {
       // ドメインに固有の振る舞いを記述できる。
       ...
    }
}</source>
			<p>
				クラスには、<code>valueType</code>要素に指定した型と同じ型をもつ非<code>private</code>なコンストラクタが必要です。
				また、<code>accessorMethod</code>要素にしてした値を名前とする非<code>private</code>なメソッドが必要です。
			</p>
			<p>
				任意ですが、ドメインクラスは不変オブジェクトとして作成することを推奨します。
				上記の例では、<code>value</code>フィールドは一度設定されると二度と変更されません。
			</p>
			<p>
				クラスには、任意のメソッドを持たせることができます。
			</p>
		</section>
		<section name="エンティティでの利用">
			<p>
				ドメインクラスは、エンティティのプロパティの型で利用できます。
			</p>
<source>@Entity
public class Employee {

    @Id
    Integer employeeId;

    String employeeName;

    PhoneNumber phoneNumber;

    @Version
    VersionNo versionNo();
    
    ...
}</source>
		</section>
		<section name="Daoでの利用">
			<p>
				ドメインクラスは、Daoのメソッドのパラメータの型にも使用できます。
			</p>
<source>@Dao(config = AppConfig.class)
public interface EmployeeDao {

    @Select
    Employee selectByPhoneNumber(PhoneNumber phoneNumber);
}</source>
		</section>
	</body>
</document>