<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>ドメインクラス</title>
	</properties>
	<body>
		<section name="目次">
			<ul>
				<li><a href="#概要">概要</a></li>
				<li><a href="#ドメイン定義">ドメイン定義</a></li>
				<li><a href="#列挙型を使用したドメイン定義">列挙型を使用したドメイン定義</a></li>
				<li><a href="#利用例">利用例</a>
					<ul>
						<li><a href="#エンティティクラス">エンティテクラス</a></li>
						<li><a href="#Daoインタフェース">Daoインタフェース</a></li>
					</ul>
				</li>
			</ul>
		</section>
		<section name="概要">
			<p>
				Domain（ドメイン）クラスの定義方法を示します。
				ドメインとは、値のとり得る範囲（定義域）のことです。
				Domaでは、テーブルのカラムの値を、ドメインと呼ばれるJavaオブジェクトで扱います。
			</p>
			<p>
				ドメインクラスを利用することで、データベース上のカラムの型が同じあってもアプリケーション上意味が異なるものを別のJavaの型で表現できます。
				これにより、意味を明確にしプログラミングミスを事前に防ぎやすくなります。
				また、ドメインクラスに振る舞いを持たせることで、よりわかりやすいプログラミングが可能です。
			</p>
			<p>
				ドメインクラスの作成と利用は任意です。
				ドメインクラスを利用しなくても<code>Integer</code>や<code>String</code>など基本型のみでデータアクセスは可能です。
			</p>
		</section>
		<section name="ドメイン定義">
			<p>
				ドメインクラスは <code>@Domain</code>を注釈して示します。
			</p>
			<p>
				<code>@Domain</code>の<code>valueType</code>要素には、ドメインクラスで扱う<a href="basic.html">基本型</a>を指定します。この基本型が、データベースのカラムの型とのマッピングに使用されます。
			</p>
			<p>
				<code>accessorMethod</code>要素には、<code>valueType</code>要素に指定した型を返すアクセッサメソッドの名前を指定します。デフォルト値は<code>getValue</code>です。
			</p>
			<p>
				以下の例では、 電話番号を表すドメインクラスを作成しています。
			</p>
<source><![CDATA[package example.domain;

import org.seasar.doma.Domain;

@Domain(valueType = String.class)
public class PhoneNumber {

    private final String value;

    public PhoneNumber(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public String getAreaCode() {
       // ドメインに固有の振る舞いを記述できる。
       ...
    }
}]]></source>
			<p>
				@Domainが注釈されたクラスはトップレベルのクラスでなければいけません。
				クラスには、<code>valueType</code>要素に指定した型と同じ型をもつ非<code>private</code>なコンストラクタが必須です。
				また、<code>accessorMethod</code>要素に指定した値と同じ名前のメソッドも必須です。
			</p>
			<p>
				任意ですが、ドメインクラスは不変オブジェクトとして作成することを推奨します。
				上記の例では、<code>value</code>フィールドは一度設定されると二度と変更されません。
			</p>
			<p>
				クラスには、任意のメソッドを持たせることができます。
			</p>
		</section>
		<section name="列挙型を使用したドメイン定義">
			<p>
				扱う値があらかじめ定まっている場合は、列挙型をドメインクラスとして扱えます。
				列挙型をドメインクラスとして扱うには、 <code>@EnumDomain</code>を注釈して示します。
			</p>
			<p>
				<code>@EnumDomain</code>の<code>valueType</code>要素には、ドメインクラスで扱う<a href="basic.html">基本型</a>を指定します。この基本型が、データベースのカラムの型とのマッピングに使用されます。
			</p>
			<p>
				<code>factoryMethod</code>要素には、<code>valueType</code>要素に指定した型をパラメータとして受け取り、対応する列挙型の値を返すstaticなファクトリメソッドの名前を指定します。
				ファクトリメソッドは、データベースの値に対応する列挙型の値を返すメソッドです。
				この要素のデフォルト値は<code>of</code>です。
			</p>
			<p>
				<code>accessorMethod</code>要素には、<code>valueType</code>要素に指定した型を返すアクセッサメソッドの名前を指定します。
				アクセッサメソッドは、列挙型の値に対応するデータベースの値を返すメソッドです。
				この要素のデフォルト値は<code>getValue</code>です。
			</p>
			<p>
				以下の例では、 仕事の種別を表すドメインクラスを作成しています。
			</p>
<source><![CDATA[package example.domain;

import org.seasar.doma.EnumDomain;

@EnumDomain(valueType = String.class)
public enum JobType {
    SALESMAN("10"), 
    MANAGER("20"), 
    ANALYST("30"), 
    PRESIDENT("40"), 
    CLERK("50");

    private final String value;

    private JobType(String value) {
        this.value = value;
    }

    public static JobType of(String value) {
        for (JobType jobType : JobType.values()) {
            if (jobType.value.equals(value)) {
                return jobType;
            }
        }
        throw new IllegalArgumentException(value);
    }

    public String getValue() {
        return value;
    }
}]]></source>
			<p>
				@EnumDomainが注釈された列挙型はトップレベルのクラスでなければいけません。
				列挙型には、<code>factoryMethod</code>要素と<code>accessorMethod</code>要素で指定された値と同じ名前のメソッドが必須です。
			</p>
			<p>
				また、列挙型には、任意のメソッドを持たせることができます。
			</p>
		</section>
		<section name="利用例">
			<subsection name="エンティティクラス">
				<p>
					エンティティクラスのフィールドの型での利用例です。
				</p>
<source><![CDATA[@Entity
public class Employee {

    @Id
    Integer employeeId;

    String employeeName;

    PhoneNumber phoneNumber;

    JobType jobType;

    @Version
    Integer versionNo();
    
    ...
}]]></source>
			</subsection>
			<subsection name="Daoインタフェース">
				<p>
					Daoインタフェースのメソッドのパラメータや戻り値での利用例です。
				</p>
<source><![CDATA[@Dao(config = AppConfig.class)
public interface EmployeeDao {

    @Select
    Employee selectByPhoneNumber(PhoneNumber phoneNumber);
    
    @Select
    List<PhoneNumber> selectAllPhoneNumber();
    
    @Select
    Employee selectByJobType(JobType jobType);
    
    @Select
    List<JobType> selectAllJobTypes();
}]]></source>
			</subsection>
		</section>
	</body>
</document>