<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>注釈処理</title>
	</properties>
	<body>
		<section name="概要">
			<p>
				Java6から導入された <a href="http://jcp.org/en/jsr/detail?id=269">Pluggable Annotation Processing API (JSR 269)</a> 
				を利用すると、ソースコードの自動生成や検証をコンパイル時に行うことができます。
			</p>
			<p>
				DomaではこのAPIを利用し、@Entityや@Daoと言ったアノテーションが注釈されたインタフェースの実装クラスを自動で作成します。
				また、注釈されたインタフェースの検証を行い、Domaの規約に従っていないソースコードがある場合は
				エラーメッセージをIDE（Eclipseなど）のエディタやjavacを実行したコンソール上に表示します。
			</p>
		</section>
		<section name="オプション">
			<p>
				注釈処理にはオプションを与えることができます。
				Domaで定義しているオプションには次のものがあります。
				必要に応じて使用してください。
			</p>
			<table>
				<tr>
					<th>key</th>
					<th>説明</th>
					<th>デフォルトの値</th>
				</tr>
				<tr>
					<td>dao.package</td>
					<td>@Daoが注釈されたインタフェースの実装クラスが生成されるパッケージ。
					何らかの値を指定した場合、dao.subpackageの指定よりも優先される。</td>
					<td>@Daoが注釈されたインタフェースと同じパッケージ</td>
				</tr>
				<tr>
					<td>dao.subpackage</td>
					<td>@Daoが注釈されたインタフェースの実装クラスが生成されるサブパッケージ。
					dao.packageに値を指定していない場合にのみ有効。
					@Daoが注釈されたインタフェースのパッケージが「example.dao」で、ここに指定した値が「impl」の場合、
					生成されるクラスのパッケージは「example.dao.impl」となる。</td>
					<td></td>
				</tr>
				<tr>
					<td>dao.suffix</td>
					<td>@Daoが注釈されたインタフェースの実装クラスの名前のサフィックス。
					@Daoが注釈されたインタフェースの単純名が「EmployeeDao」で、ここに指定した値が「Impl」の場合、
					生成されるクラスの単純名は「EmployeeDaoImpl」となる。</td>
					<td>_ （アンダースコア）</td>
				</tr>
				<tr>
					<td>debug</td>
					<td>注釈処理のデバッグ情報をログ出力するかどうか。「true」の場合、ログ出力を行う。</td>
					<td>false</td>
				</tr>
				<tr>
					<td>dto.generation</td>
					<td>@Entityが注釈されたインタフェースに対応するDTOクラスを生成するかどうか。
					出力されるDTOはDomaに依存しないいわゆるPOJOなクラス。「true」の場合生成する。</td>
					<td>false</td>
				</tr>
				<tr>
					<td>dto.package</td>
					<td>@Entityが注釈されたインタフェースに対応するDTOクラスが生成されるパッケージ。
					何らかの値を指定した場合、dto.subpackageの指定よりも優先される。
					dto.generation=trueの場合にのみ有効。</td>
					<td>@Entityが注釈されたインタフェースと同じパッケージ</td>
				</tr>
				<tr>
					<td>dto.subpackage</td>
					<td>@Entityが注釈されたインタフェースに対応するDTOクラスが生成されるサブパッケージ。
					dto.packageに値を指定していない場合かつdto.generation=trueの場合にのみ有効。
					@Entityが注釈されたインタフェースのパッケージが「example.entity」で、ここに指定した値が「dto」の場合、
					生成されるクラスのパッケージは「example.entity.dto」となる。</td>
					<td></td>
				</tr>
				<tr>
					<td>dto.suffix</td>
					<td>@Entityが注釈されたインタフェースに対応するDTOクラスの名前のサフィックス。
					dto.generation=trueの場合にのみ有効。
					@Entityが注釈されたインタフェースの単純名が「Employee」で、ここに指定した値が「TransferObject」の場合、
					生成されるクラスの単純名は「EmployeeTransferObject」となる。</td>
					<td>Dto</td>
				</tr>
				<tr>
					<td>entity.package</td>
					<td>@Entityが注釈されたインタフェースの実装クラスが生成されるパッケージ。
					何らかの値を指定した場合、entity.subpackageの指定よりも優先される。</td>
					<td>@Entityが注釈されたインタフェースと同じパッケージ</td>
				</tr>
				<tr>
					<td>entity.subpackage</td>
					<td>@Entityが注釈されたインタフェースの実装クラスが生成されるサブパッケージ。
					entity.packageに値を指定していない場合にのみ有効。
					@Entityが注釈されたインタフェースのパッケージが「example.entity」で、ここに指定した値が「impl」の場合、
					生成されるクラスのパッケージは「example.entity.impl」となる。</td>
					<td></td>
				</tr>
				<tr>
					<td>entity.suffix</td>
					<td>@Entityが注釈されたインタフェースの実装クラスの名前のサフィックス。
					@Entityが注釈されたインタフェースの単純名が「Employee」で、ここに指定した値が「Impl」の場合、
					生成されるクラスの単純名は「EmployeeImpl」となる。</td>
					<td>_ （アンダースコア）</td>
				</tr>
			</table>
			<subsection name="Eclipseでのオプション指定">
				<p>
					Ecipseでは、プロジェクトのプロパティの「Annotation Processing」の項目でオプションを登録します。
				</p>
				<img src="../images/eclipse_apt_options.png" width="454" height="152" alt="Eclipseでのオプション指定" />
				<p>
					上記の図では、わかりやすさのためにValueを持たないものまで登録していますが、
					実際には必要なものだけで問題ありません。
				</p>
			</subsection>
			<subsection name="javacでのオプション指定">
				<p>
					-Aオプションにより登録します。詳細は<a href="http://java.sun.com/javase/ja/6/docs/ja/technotes/guides/javac/index.html">javacのドキュメント</a>を参照してください。
				</p>
			</subsection>
			<subsection name="Antでのオプション指定">
				<p>
					javacタスクのcompilerargタグのlineパラメータを使用します。
				</p>
				<source><![CDATA[<javac fork="yes" srcdir="src" compiler="javac1.6"
	classpathref="classpath" destdir="target" debug="on" encoding="UTF-8" >
	<compilerarg line="-Adto.generation=true -Adto.package=hoge.dto"/>
</javac>]]></source>
			</subsection>
			<subsection name="Mavenでのオプション指定">
				<p>
					maven-compiler-pluginのcompilerArgumentタグを使用します。
				</p>
				<source><![CDATA[<plugin>
	<artifactId>maven-compiler-plugin</artifactId>
	<configuration>
		<source>1.6</source>
		<target>1.6</target>
		<encoding>UTF-8</encoding>
		<compilerArgument>-Adao.subpackage=impl</compilerArgument>
	</configuration>
</plugin>]]></source>
				<p>
					指定したいオプションが1つの場合は問題ありませんが、複数のオプションは<a href="http://jira.codehaus.org/browse/MCOMPILER-62">Mavenの制限</a>により指定できません。
				</p>
			</subsection>
		</section>
	</body>
</document>