package org.seasar.doma.internal.jdbc.command;

import static org.seasar.doma.internal.util.Assertions.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.seasar.doma.internal.jdbc.query.BatchModifyQuery;
import org.seasar.doma.internal.jdbc.sql.PreparedSql;
import org.seasar.doma.jdbc.Dialect;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.OptimisticLockException;
import org.seasar.doma.jdbc.UniqueConstraintException;
import org.seasar.doma.message.MessageCode;


/**
 * @author taedium
 * 
 */
public abstract class BatchModifyCommand<Q extends BatchModifyQuery> implements
        Command<int[], Q> {

    protected final Q query;

    public BatchModifyCommand(Q query) {
        assertNotNull(query);
        this.query = query;
    }

    @Override
    public int[] execute() {
        if (!query.isExecutable()) {
            return new int[] {};
        }
        Connection connection = Jdbcs.getConnection(query.getConfig()
                .dataSource());
        try {
            PreparedStatement preparedStatement = Jdbcs
                    .prepareStatement(connection, query.getSql().getRawSql(), query
                            .isAutoGeneratedKeysSupported());
            try {
                setupOptions(preparedStatement);
                return executeInternal(preparedStatement, query.getSqls());
            } catch (SQLException e) {
                throw new JdbcException(MessageCode.DOMA2009, e, e);
            } finally {
                Jdbcs.close(preparedStatement, query.getConfig().jdbcLogger());
            }
        } finally {
            Jdbcs.close(connection, query.getConfig().jdbcLogger());
        }
    }

    protected abstract int[] executeInternal(
            PreparedStatement preparedStatement, List<PreparedSql> sqls)
            throws SQLException;

    protected void setupOptions(PreparedStatement preparedStatement)
            throws SQLException {
        if (query.getQueryTimeout() > 0) {
            preparedStatement.setQueryTimeout(query.getQueryTimeout());
        }
    }

    protected int[] executeBatch(PreparedStatement preparedStatement,
            List<PreparedSql> sqls) throws SQLException {
        int batchSize = query.getBatchSize();
        int sqlSize = sqls.size();
        int[] updatedRows = new int[sqlSize];
        int pos = 0;
        for (int i = 0; i < sqlSize; i++) {
            PreparedSql sql = sqls.get(i);
            log(sql);
            bindParameters(preparedStatement, sql);
            preparedStatement.addBatch();
            if (i == sqlSize - 1 || (batchSize > 0 && (i + 1) % batchSize == 0)) {
                int[] rows = executeBatch(preparedStatement, sql);
                validateRows(preparedStatement, sql, rows);
                System.arraycopy(rows, 0, updatedRows, pos, rows.length);
                pos = i + 1;
            }
        }
        return updatedRows;
    }

    protected int[] executeBatch(PreparedStatement preparedStatement,
            PreparedSql sql) throws SQLException {
        try {
            return preparedStatement.executeBatch();
        } catch (SQLException e) {
            Dialect dialect = query.getConfig().dialect();
            if (dialect.isUniqueConstraintViolated(e)) {
                throw new UniqueConstraintException(sql, e);
            }
            throw e;
        }
    }

    protected void log(PreparedSql sql) {
        query.getConfig().jdbcLogger().logSql(query.getClassName(), query
                .getMethodName(), sql);
    }

    protected void bindParameters(PreparedStatement preparedStatement,
            PreparedSql sql) throws SQLException {
        PreparedSqlParameterBinder binder = new PreparedSqlParameterBinder(
                query);
        binder.bind(preparedStatement, sql.getParameters());
    }

    protected void validateRows(PreparedStatement preparedStatement,
            PreparedSql sql, int[] rows) throws SQLException {
        Dialect dialect = query.getConfig().dialect();
        if (dialect.supportsBatchUpdateResults()) {
            if (!query.isOptimisticLockCheckRequired()) {
                return;
            }
            for (int i = 0; i < rows.length; ++i) {
                if (rows[i] != 1) {
                    throw new OptimisticLockException(sql.getRawSql(), "");
                }
            }
        } else if (preparedStatement.getUpdateCount() == rows.length) {
            Arrays.fill(rows, 1);
        } else {
            if (!query.isOptimisticLockCheckRequired()) {
                return;
            }
            throw new OptimisticLockException(sql.getRawSql(), "");
        }
    }
}
