/*
 * Copyright 2004-2009 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.seasar.doma.internal.jdbc.query;

import static org.seasar.doma.internal.util.AssertionUtil.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.seasar.doma.internal.jdbc.entity.EntityPropertyType;
import org.seasar.doma.internal.jdbc.entity.EntityType;
import org.seasar.doma.internal.jdbc.entity.EntityTypeFactory;
import org.seasar.doma.internal.jdbc.entity.VersionPropertyType;
import org.seasar.doma.internal.jdbc.sql.PreparedSql;
import org.seasar.doma.internal.jdbc.util.ColumnUtil;
import org.seasar.doma.internal.jdbc.util.TableUtil;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.SqlExecutionSkipCause;
import org.seasar.doma.message.DomaMessageCode;

/**
 * @author taedium
 * 
 */
public abstract class AutoBatchModifyQuery<E> implements BatchModifyQuery {

    protected static final String[] EMPTY_STRINGS = new String[] {};

    protected String[] includedPropertyNames = EMPTY_STRINGS;

    protected String[] excludedPropertyNames = EMPTY_STRINGS;

    protected final EntityTypeFactory<E> entityTypeFactory;

    protected Config config;

    protected List<EntityType<E>> entityTypes;

    protected String callerClassName;

    protected String callerMethodName;

    protected final List<EntityPropertyType<?>> targetProperties = new ArrayList<EntityPropertyType<?>>();

    protected final List<EntityPropertyType<?>> idProperties = new ArrayList<EntityPropertyType<?>>();

    protected VersionPropertyType<?> versionPropertyType;

    protected String tableName;

    protected final Map<String, String> columnNameMap = new HashMap<String, String>();

    protected final List<PreparedSql> sqls = new ArrayList<PreparedSql>(100);

    protected boolean optimisticLockCheckRequired;

    protected boolean autoGeneratedKeysSupported;

    protected boolean executable;

    protected SqlExecutionSkipCause executionSkipCause = SqlExecutionSkipCause.BATCH_TARGET_NONEXISTENT;

    protected EntityType<E> entityType;

    protected int queryTimeout;

    protected int batchSize;

    public AutoBatchModifyQuery(EntityTypeFactory<E> entityTypeFactory) {
        assertNotNull(entityTypeFactory);
        this.entityTypeFactory = entityTypeFactory;
    }

    protected void prepareTableAndColumnNames() {
        tableName = TableUtil.getQualifiedTableName(config, entityType);
        for (EntityPropertyType<?> p : entityType.getEntityPropertyTypes()) {
            if (!p.isUpdatable()) {
                continue;
            }
            String columnName = ColumnUtil.getColumnName(config, p);
            columnNameMap.put(p.getName(), columnName);
        }
    }

    protected void prepareIdAndVersionProperties() {
        for (EntityPropertyType<?> p : entityType.getEntityPropertyTypes()) {
            if (p.isId()) {
                idProperties.add(p);
            }
        }
        versionPropertyType = entityType.getVersionPropertyType();
    }

    protected void validateIdExistent() {
        if (idProperties.isEmpty()) {
            throw new JdbcException(DomaMessageCode.DOMA2022, entityType
                    .getName());
        }
    }

    protected void prepareOptions() {
        if (queryTimeout <= 0) {
            queryTimeout = config.queryTimeout();
        }
        if (batchSize <= 0) {
            batchSize = config.batchSize();
        }
    }

    protected boolean isTargetPropertyName(String name) {
        if (includedPropertyNames.length > 0) {
            for (String includedName : includedPropertyNames) {
                if (includedName.equals(name)) {
                    for (String excludedName : excludedPropertyNames) {
                        if (excludedName.equals(name)) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        }
        if (excludedPropertyNames.length > 0) {
            for (String excludedName : excludedPropertyNames) {
                if (excludedName.equals(name)) {
                    return false;
                }
            }
            return true;
        }
        return true;
    }

    @Override
    public void complete() {
        for (EntityType<E> entityType : entityTypes) {
            entityType.refreshEntity();
        }
    }

    public void setConfig(Config config) {
        this.config = config;
    }

    public void setEntities(List<E> entities) {
        assertNotNull(entities);
        entityTypes = new ArrayList<EntityType<E>>(entities.size());
        for (E entity : entities) {
            entityTypes.add(entityTypeFactory.createEntityType(entity));
        }
    }

    public void setCallerClassName(String callerClassName) {
        this.callerClassName = callerClassName;
    }

    public void setCallerMethodName(String callerMethodName) {
        this.callerMethodName = callerMethodName;
    }

    public void setQueryTimeout(int queryTimeout) {
        this.queryTimeout = queryTimeout;
    }

    public void setBatchSize(int batchSize) {
        this.batchSize = batchSize;
    }

    public void setIncludedPropertyNames(String... includedPropertyNames) {
        this.includedPropertyNames = includedPropertyNames;
    }

    public void setExcludedPropertyNames(String... excludedPropertyNames) {
        this.excludedPropertyNames = excludedPropertyNames;
    }

    @Override
    public PreparedSql getSql() {
        return sqls.get(0);
    }

    @Override
    public String getClassName() {
        return callerClassName;
    }

    @Override
    public String getMethodName() {
        return callerMethodName;
    }

    @Override
    public List<PreparedSql> getSqls() {
        return sqls;
    }

    @Override
    public Config getConfig() {
        return config;
    }

    @Override
    public boolean isOptimisticLockCheckRequired() {
        return optimisticLockCheckRequired;
    }

    @Override
    public boolean isAutoGeneratedKeysSupported() {
        return autoGeneratedKeysSupported;
    }

    @Override
    public boolean isExecutable() {
        return executable;
    }

    @Override
    public SqlExecutionSkipCause getSqlExecutionSkipCause() {
        return executionSkipCause;
    }

    public int getQueryTimeout() {
        return queryTimeout;
    }

    @Override
    public int getBatchSize() {
        return batchSize;
    }

    @Override
    public String toString() {
        return sqls.toString();
    }

}
