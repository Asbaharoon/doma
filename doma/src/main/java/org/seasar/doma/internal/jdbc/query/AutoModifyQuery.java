/*
 * Copyright 2004-2009 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.seasar.doma.internal.jdbc.query;

import static org.seasar.doma.internal.util.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.seasar.doma.internal.jdbc.Entity;
import org.seasar.doma.internal.jdbc.Property;
import org.seasar.doma.internal.jdbc.VersionProperty;
import org.seasar.doma.internal.jdbc.sql.PreparedSql;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.message.MessageCode;


/**
 * @author taedium
 * 
 */
public abstract class AutoModifyQuery<I, E extends Entity<I>> implements
        ModifyQuery {

    protected Class<E> entityClass;

    protected Config config;

    protected E entity;

    protected String callerClassName;

    protected String callerMethodName;

    protected PreparedSql sql;

    protected final List<Property<?>> targetProperties = new ArrayList<Property<?>>();

    protected final List<Property<?>> idProperties = new ArrayList<Property<?>>();

    protected VersionProperty<?> versionProperty;

    protected String tableName;

    protected final Map<String, String> columnNameMap = new HashMap<String, String>();

    protected boolean optimisticLockCheckRequired;

    protected boolean autoGeneratedKeysSupported;

    protected boolean executable;

    protected int queryTimeout;

    public AutoModifyQuery(Class<E> entityClass) {
        assertNotNull(entityClass);
        this.entityClass = entityClass;
    }

    protected void prepareTableAndColumnNames() {
        tableName = entity.__getQualifiedTableName(config);
        for (Property<?> p : entity.__getProperties()) {
            columnNameMap.put(p.getName(), p.getColumnName(config));
        }
    }

    protected void prepareIdAndVersionProperties() {
        for (Property<?> p : entity.__getProperties()) {
            if (p.isId()) {
                idProperties.add(p);
            }
        }
        versionProperty = entity.__getVersionProperty();
    }

    protected void validateIdExistent() {
        if (idProperties.isEmpty()) {
            throw new JdbcException(MessageCode.DOMA2022, entity.__getName());
        }
    }

    protected void prepareOptions() {
        if (queryTimeout <= 0) {
            queryTimeout = config.queryTimeout();
        }
    }

    public void setConfig(Config config) {
        this.config = config;
    }

    public void setEntity(I entity) {
        if (!entityClass.isInstance(entity)) {
            throw new JdbcException(MessageCode.DOMA2026, entity, entityClass
                    .getName());
        }
        this.entity = entityClass.cast(entity);
    }

    public void setCallerClassName(String callerClassName) {
        this.callerClassName = callerClassName;
    }

    public void setCallerMethodName(String callerMethodName) {
        this.callerMethodName = callerMethodName;
    }

    public void setQueryTimeout(int queryTimeout) {
        this.queryTimeout = queryTimeout;
    }

    public PreparedSql getSql() {
        return sql;
    }

    public String getClassName() {
        return callerClassName;
    }

    public String getMethodName() {
        return callerMethodName;
    }

    public Config getConfig() {
        return config;
    }

    public boolean isOptimisticLockCheckRequired() {
        return optimisticLockCheckRequired;
    }

    @Override
    public boolean isExecutable() {
        return executable;
    }

    @Override
    public boolean isAutoGeneratedKeysSupported() {
        return autoGeneratedKeysSupported;
    }

    @Override
    public int getQueryTimeout() {
        return queryTimeout;
    }

    @Override
    public String toString() {
        return sql != null ? sql.toString() : null;
    }
}
