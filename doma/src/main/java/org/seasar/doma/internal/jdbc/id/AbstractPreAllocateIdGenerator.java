package org.seasar.doma.internal.jdbc.id;

import java.sql.Statement;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * @author taedium
 * 
 */
public abstract class AbstractPreAllocateIdGenerator extends
        AbstractIdGenerator {

    protected final long initialValue;

    protected final long allocationSize;

    protected ConcurrentMap<String, IdContext> idContextMap = new ConcurrentHashMap<String, IdContext>();

    public AbstractPreAllocateIdGenerator(long initialValue, long allocationSize) {
        this.initialValue = initialValue;
        this.allocationSize = allocationSize;
    }

    @Override
    public boolean supportsBatch(IdGenerationConfig config) {
        return true;
    }

    @Override
    public boolean supportsAutoGeneratedKeys(IdGenerationConfig config) {
        return false;
    }

    @Override
    public boolean includesIdentityColumn(IdGenerationConfig config) {
        return true;
    }

    @Override
    public Long generatePreInsert(IdGenerationConfig config) {
        IdContext idContext = getIdContext(config);
        return idContext.getNextValue(config);
    }

    @Override
    public Long generatePostInsert(IdGenerationConfig config,
            Statement statement) {
        return null;
    }

    protected IdContext getIdContext(IdGenerationConfig config) {
        String dataSourceName = config.getDataSourceName();
        IdContext context = idContextMap.get(dataSourceName);
        if (context != null) {
            return context;
        }
        context = new IdContext();
        IdContext existent = idContextMap.putIfAbsent(dataSourceName, context);
        if (existent != null) {
            return existent;
        }
        return context;
    }

    protected abstract long getNewInitialValue(IdGenerationConfig config);

    public class IdContext {

        protected long initValue = AbstractPreAllocateIdGenerator.this.initialValue;

        protected long allocated = Long.MAX_VALUE;

        public synchronized long getNextValue(IdGenerationConfig config) {
            if (allocated < allocationSize) {
                return initValue + allocated++;
            }
            initValue = getNewInitialValue(config);
            allocated = 1;
            return initValue;
        }

    }
}
