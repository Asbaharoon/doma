package org.seasar.doma.internal.jdbc.command;

import static org.seasar.doma.internal.util.Assertions.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.seasar.doma.internal.jdbc.query.ModifyQuery;
import org.seasar.doma.internal.jdbc.sql.PreparedSql;
import org.seasar.doma.jdbc.Dialect;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.OptimisticLockException;
import org.seasar.doma.jdbc.UniqueConstraintException;
import org.seasar.doma.message.MessageCode;


/**
 * @author taedium
 * 
 */
public abstract class ModifyCommand<Q extends ModifyQuery> implements
        Command<Integer, Q> {

    protected final Q query;

    protected final PreparedSql sql;

    public ModifyCommand(Q query) {
        assertNotNull(query);
        this.query = query;
        this.sql = query.getSql();
    }

    public Integer execute() {
        if (!query.isExecutable()) {
            return 0;
        }
        Connection connection = Jdbcs.getConnection(query.getConfig()
                .dataSource());
        try {
            PreparedStatement preparedStatement = Jdbcs
                    .prepareStatement(connection, sql.getRawSql(), query
                            .isAutoGeneratedKeysSupported());
            try {
                log();
                setupOptions(preparedStatement);
                bindValues(preparedStatement);
                return executeInternal(preparedStatement);
            } catch (SQLException e) {
                throw new JdbcException(MessageCode.DOMA2009, e, e);
            } finally {
                Jdbcs.close(preparedStatement, query.getConfig().jdbcLogger());
            }
        } finally {
            Jdbcs.close(connection, query.getConfig().jdbcLogger());
        }
    }

    protected abstract int executeInternal(PreparedStatement preparedStatement)
            throws SQLException;

    protected void log() {
        query.getConfig().jdbcLogger().logSql(query.getClassName(), query
                .getMethodName(), sql);
    }

    protected void setupOptions(PreparedStatement preparedStatement)
            throws SQLException {
        if (query.getQueryTimeout() > 0) {
            preparedStatement.setQueryTimeout(query.getQueryTimeout());
        }
    }

    protected void bindValues(PreparedStatement preparedStatement)
            throws SQLException {
        PreparedSqlParameterBinder binder = new PreparedSqlParameterBinder(
                query);
        binder.bind(preparedStatement, sql.getParameters());
    }

    protected int executeUpdate(PreparedStatement preparedStatement)
            throws SQLException {
        try {
            int updatedRows = preparedStatement.executeUpdate();
            validateRows(updatedRows);
            return updatedRows;
        } catch (SQLException e) {
            Dialect dialect = query.getConfig().dialect();
            if (dialect.isUniqueConstraintViolated(e)) {
                throw new UniqueConstraintException(sql, e);
            }
            throw e;
        }
    }

    protected void validateRows(int rows) {
        if (query.isOptimisticLockCheckRequired() && rows == 0) {
            throw new OptimisticLockException(sql);
        }
    }
}
