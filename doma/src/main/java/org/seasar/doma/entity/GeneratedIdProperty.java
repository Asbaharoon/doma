/*
 * Copyright 2004-2009 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.seasar.doma.entity;

import java.sql.Statement;

import org.seasar.doma.DomaIllegalArgumentException;
import org.seasar.doma.GenerationType;
import org.seasar.doma.domain.NumberDomain;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.dialect.Dialect;
import org.seasar.doma.jdbc.id.IdGenerationConfig;
import org.seasar.doma.jdbc.id.IdGenerator;
import org.seasar.doma.message.DomaMessageCode;

/**
 * @author taedium
 * 
 */
public class GeneratedIdProperty<D extends NumberDomain<?, ?>> extends
        BasicProperty<D> {

    protected final IdGenerator idGenerator;

    public GeneratedIdProperty(String name, String columnName, D domain,
            boolean insertable, boolean updatable, IdGenerator idGenerator) {
        super(name, columnName, domain, insertable, updatable);
        if (idGenerator == null) {
            throw new DomaIllegalArgumentException("idGenerator", idGenerator);
        }
        this.idGenerator = idGenerator;
    }

    @Override
    public boolean isId() {
        return true;
    }

    public void validateGenerationStrategy(IdGenerationConfig config) {
        Dialect dialect = config.getDialect();
        GenerationType generationType = idGenerator.getGenerationType();
        if (!isGenerationTypeSupported(generationType, dialect)) {
            Entity<?> entity = config.getEntity();
            throw new JdbcException(DomaMessageCode.DOMA2021, entity.__getName(),
                    name, generationType.name(), dialect.getName());
        }
    }

    protected boolean isGenerationTypeSupported(GenerationType generationType,
            Dialect dialect) {
        switch (generationType) {
        case IDENTITY: {
            return dialect.supportsIdentity();
        }
        case SEQUENCE: {
            return dialect.supportsSequence();
        }
        }
        return true;
    }

    public boolean isIncluded(IdGenerationConfig config) {
        return idGenerator.includesIdentityColumn(config);
    }

    public boolean isBatchSupported(IdGenerationConfig config) {
        return idGenerator.supportsBatch(config);
    }

    public boolean isAutoGeneratedKeysSupported(IdGenerationConfig config) {
        return idGenerator.supportsAutoGeneratedKeys(config);
    }

    public void preInsert(IdGenerationConfig config) {
        Long value = idGenerator.generatePreInsert(config);
        if (value != null) {
            domain.set(value);
        }
    }

    public void postInsert(IdGenerationConfig config, Statement statement) {
        Long value = idGenerator.generatePostInsert(config, statement);
        if (value != null) {
            domain.set(value);
        }
    }
}
