package org.seasar.doma.internal.jdbc.mock;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Arrays;

import org.seasar.doma.internal.util.Assertions;


/**
 * 
 * @author taedium
 * 
 */
public class MockStatement extends MockWrapper implements Statement {

    public boolean closed;

    public int addBatchCount;

    public int updatedRows = 1;

    @Override
    public void addBatch(String sql) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void cancel() throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void clearBatch() throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void clearWarnings() throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void close() throws SQLException {
        closed = true;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        int[] results = new int[addBatchCount];
        Arrays.fill(results, updatedRows);
        return results;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        Assertions.notYetImplemented();
        return null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public Connection getConnection() throws SQLException {
        Assertions.notYetImplemented();
        return null;
    }

    @Override
    public int getFetchDirection() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int getFetchSize() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        Assertions.notYetImplemented();
        return null;
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int getMaxRows() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        Assertions.notYetImplemented();
        return null;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int getResultSetType() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        Assertions.notYetImplemented();
        return 0;
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        Assertions.notYetImplemented();
        return null;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }

    @Override
    public boolean isPoolable() throws SQLException {
        Assertions.notYetImplemented();
        return false;
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        Assertions.notYetImplemented();

    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
    }

}
