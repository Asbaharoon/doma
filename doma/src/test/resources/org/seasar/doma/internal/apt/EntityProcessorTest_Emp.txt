package org.seasar.doma.internal.apt.entity;

@javax.annotation.Generated(value = { "Doma", "@VERSION@" }, date = "1970-01-01 09:00:00")
public class Emp_ extends org.seasar.doma.entity.DomaAbstractEntity<org.seasar.doma.internal.apt.entity.Emp> implements org.seasar.doma.internal.apt.entity.Emp, java.io.Serializable {

    private static final long serialVersionUID = 1L;

    private static final org.seasar.doma.internal.jdbc.id.IdGenerator __idGenerator = new org.seasar.doma.internal.jdbc.id.SequenceIdGenerator("EMP_ID", 1, 1);

    private static final org.seasar.doma.internal.apt.entity.EmpListener __listener = new org.seasar.doma.internal.apt.entity.EmpListener();

    private transient org.seasar.doma.entity.GeneratedIdProperty<org.seasar.doma.domain.IntegerDomain> id = new org.seasar.doma.entity.GeneratedIdProperty<org.seasar.doma.domain.IntegerDomain>("id", null, new org.seasar.doma.domain.IntegerDomain(), true, true, __idGenerator);

    private transient org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.StringDomain> name = new org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.StringDomain>("name", null, new org.seasar.doma.domain.StringDomain(), true, true);

    private transient org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.BigDecimalDomain> salary = new org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.BigDecimalDomain>("salary", "SALARY", new org.seasar.doma.domain.BigDecimalDomain(), false, false);

    private transient org.seasar.doma.entity.VersionProperty<org.seasar.doma.domain.IntegerDomain> version = new org.seasar.doma.entity.VersionProperty<org.seasar.doma.domain.IntegerDomain>("version", null, new org.seasar.doma.domain.IntegerDomain(), true, true);

    private final org.seasar.doma.domain.StringDomain temp = new org.seasar.doma.domain.StringDomain();

    private final String __name = "Emp";

    private transient java.util.List<org.seasar.doma.entity.EntityProperty<?>> __entityProperties;

    private transient java.util.Map<String, org.seasar.doma.entity.EntityProperty<?>> __entityPropertyMap;

    public Emp_() {
        super(null, "AAA", null);
    }

    @Override
    public org.seasar.doma.domain.IntegerDomain id() {
        return id.getDomain();
    }

    @Override
    public org.seasar.doma.domain.StringDomain name() {
        return name.getDomain();
    }

    @Override
    public org.seasar.doma.domain.BigDecimalDomain salary() {
        return salary.getDomain();
    }

    @Override
    public org.seasar.doma.domain.IntegerDomain version() {
        return version.getDomain();
    }

    @Override
    public org.seasar.doma.domain.StringDomain temp() {
        return temp;
    }

    @Override
    public String __getName() {
        return __name;
    }

    @Override
    public org.seasar.doma.internal.apt.entity.Emp __asInterface() {
        return this;
    }

    @Override
    public void __preInsert() {
        __listener.preInsert(this);
    }

    @Override
    public void __preUpdate() {
        __listener.preUpdate(this);
    }

    @Override
    public void __preDelete() {
        __listener.preDelete(this);
    }

    @Override
    public java.util.List<org.seasar.doma.entity.EntityProperty<?>> __getEntityProperties() {
        if (__entityProperties == null) {
            java.util.List<org.seasar.doma.entity.EntityProperty<?>> __list = new java.util.ArrayList<org.seasar.doma.entity.EntityProperty<?>>();
            __list.add(id);
            __list.add(name);
            __list.add(salary);
            __list.add(version);
            __entityProperties = java.util.Collections.unmodifiableList(__list);
        }
        return __entityProperties;
    }

    @Override
    public org.seasar.doma.entity.EntityProperty<?> __getEntityProperty(String __name) {
        if (__entityPropertyMap == null) {
            java.util.Map<String, org.seasar.doma.entity.EntityProperty<?>> __map = new java.util.HashMap<String, org.seasar.doma.entity.EntityProperty<?>>();
            __map.put("id", id);
            __map.put("name", name);
            __map.put("salary", salary);
            __map.put("version", version);
            __entityPropertyMap = java.util.Collections.unmodifiableMap(__map);
        }
        return __entityPropertyMap.get(__name);
    }

    @Override
    public org.seasar.doma.entity.GeneratedIdProperty<?> __getGeneratedIdProperty() {
        return id;
    }

    @Override
    public org.seasar.doma.entity.VersionProperty<?> __getVersionProperty() {
        return version;
    }

    @Override
    public String toString() {
        return "Emp_ [id=" + id + ", name=" + name + ", salary=" + salary + ", version=" + version + ", temp=" + temp + "]";
    }

    private void readObject(java.io.ObjectInputStream inputStream) throws java.io.IOException, java.lang.ClassNotFoundException {
        inputStream.defaultReadObject();
        id = new org.seasar.doma.entity.GeneratedIdProperty<org.seasar.doma.domain.IntegerDomain>("id", null, (org.seasar.doma.domain.IntegerDomain)inputStream.readObject(), true, true, __idGenerator);
        name = new org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.StringDomain>("name", null, (org.seasar.doma.domain.StringDomain)inputStream.readObject(), true, true);
        salary = new org.seasar.doma.entity.BasicProperty<org.seasar.doma.domain.BigDecimalDomain>("salary", "SALARY", (org.seasar.doma.domain.BigDecimalDomain)inputStream.readObject(), false, false);
        version = new org.seasar.doma.entity.VersionProperty<org.seasar.doma.domain.IntegerDomain>("version", null, (org.seasar.doma.domain.IntegerDomain)inputStream.readObject(), true, true);
    }

    private void writeObject(java.io.ObjectOutputStream outputStream) throws java.io.IOException {
        outputStream.defaultWriteObject();
        outputStream.writeObject(id.getDomain());
        outputStream.writeObject(name.getDomain());
        outputStream.writeObject(salary.getDomain());
        outputStream.writeObject(version.getDomain());
    }

}
